// ../.hql-cache/doc/examples/hql-dot-notation-showcase.ts
var text = "   The quick brown fox jumps over the lazy dog   ";
var numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
var person = {
  name: "John Smith",
  age: 35,
  address: {
    street: "123 Main St",
    city: "Anytown",
    country: "USA"
  },
  hobbies: ["coding", "reading", "hiking", "photography"]
};
console.log("========== BASIC DOT NOTATION ==========");
console.log("Person's name: ", (() => {
  const _obj = person;
  const _prop = _obj.name;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})());
console.log("First three hobbies: ", (() => {
  const _obj = person;
  const _prop = _obj.hobbies;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})().slice(0, 3));
console.log("Trimmed text: ", (() => {
  const _obj = text;
  const _prop = _obj.trim;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})());
console.log("\\n========== PRIMITIVE VALUES AS OBJECTS ==========");
console.log("String upper case: ", (() => {
  const _obj = "hello world";
  const _prop = _obj.toUpperCase;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})());
console.log("String split: ", "a,b,c,d".split(","));
console.log("Number fixed: ", 123.456789.toFixed(2));
console.log("Number as exponential: ", (() => {
  const _obj = 1234;
  const _prop = _obj.toExponential;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})());
console.log("Boolean as string: ", (() => {
  const _obj = true;
  const _prop = _obj.toString;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})());
console.log("\\n========== METHOD CHAINING ==========");
console.log("Trimmed and uppercase text: ", (() => {
  const _obj = (() => {
    const _obj2 = text;
    const _prop2 = _obj2.trim;
    return typeof _prop2 === "function" ? _prop2.call(_obj2) : _prop2;
  })();
  const _prop = _obj.toUpperCase;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})());
console.log("Complex text transformation: ", (() => {
  const _obj = (() => {
    const _obj2 = text;
    const _prop2 = _obj2.trim;
    return typeof _prop2 === "function" ? _prop2.call(_obj2) : _prop2;
  })();
  const _prop = _obj.toLowerCase;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})().replace("quick", "clever").split(" ").filter(function(word) {
  return (word === null ? 0 : word.length) > 3;
}).map(function(word) {
  return word.toUpperCase();
}).join("_"));
console.log("Number transformation: ", numbers.filter(function(n) {
  return n % 20 === 0;
}).map(function(n) {
  return n * 2;
}).reduce(function(acc, curr) {
  return acc + curr;
}, 0));
console.log("\\n========== NESTED OBJECT ACCESS ==========");
console.log("Nested property access: ", (() => {
  const _obj = (() => {
    const _obj2 = person;
    const _prop2 = _obj2.address;
    return typeof _prop2 === "function" ? _prop2.call(_obj2) : _prop2;
  })();
  const _prop = _obj.city;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})());
console.log("Person's country uppercase: ", (() => {
  const _obj = (() => {
    const _obj2 = (() => {
      const _obj3 = person;
      const _prop3 = _obj3.address;
      return typeof _prop3 === "function" ? _prop3.call(_obj3) : _prop3;
    })();
    const _prop2 = _obj2.country;
    return typeof _prop2 === "function" ? _prop2.call(_obj2) : _prop2;
  })();
  const _prop = _obj.toUpperCase;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})());
console.log("Uppercase hobbies: ", (() => {
  const _obj = person;
  const _prop = _obj.hobbies;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})().map(function(hobby) {
  return hobby.toUpperCase();
}).join(", "));
console.log("\\n========== CLASS DEFINITION AND USAGE ==========");
var Point = class {
  constructor(x, y) {
    this.x = 0;
    this.y = 0;
    self.x = x;
    return this;
  }
  distanceTo(otherPoint) {
    return function() {
      const dx = otherPoint.x - self.x;
      const dy = otherPoint.y - self.y;
      Math.sqrt(dx * dx + dy * dy);
      return Math.sqrt(dx * dx + dy * dy);
    }();
  }
  toString() {
    return "Point(" + self.x + ", " + self.y + ")";
  }
};
var p1 = new Point(3, 4);
var p2 = new Point(6, 8);
console.log("Point 1: ", (() => {
  const _obj = p1;
  const _prop = _obj.toString;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})());
console.log("Point 2: ", (() => {
  const _obj = p2;
  const _prop = _obj.toString;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})());
console.log("Distance between points: ", p1.distanceTo(p2));
console.log("\\n========== DATA PROCESSING EXAMPLE ==========");
var orders = [{
  id: "ORD-001",
  isActive: true,
  date: /* @__PURE__ */ new Date("2023-01-15"),
  customer: {
    name: "Alice Johnson",
    id: "C001"
  },
  items: [{
    name: "Laptop",
    price: 1200
  }, {
    name: "Mouse",
    price: 25
  }]
}, {
  id: "ORD-002",
  isActive: true,
  date: /* @__PURE__ */ new Date("2023-02-20"),
  customer: {
    name: "Bob Smith",
    id: "C002"
  },
  items: [{
    name: "Monitor",
    price: 300
  }, {
    name: "Keyboard",
    price: 50
  }, {
    name: "Speakers",
    price: 80
  }]
}, {
  id: "ORD-003",
  isActive: false,
  date: /* @__PURE__ */ new Date("2023-03-10"),
  customer: {
    name: "Charlie Davis",
    id: "C003"
  },
  items: [{
    name: "Headphones",
    price: 150
  }]
}];
function processOrders(orders2) {
  return orders2.filter(function(order) {
    return (() => {
      const _obj = order;
      const _prop = _obj.isActive;
      return typeof _prop === "function" ? _prop.call(_obj) : _prop;
    })();
  }).map(function(order) {
    return {
      id: (() => {
        const _obj = order;
        const _prop = _obj.id;
        return typeof _prop === "function" ? _prop.call(_obj) : _prop;
      })(),
      total: (() => {
        const _obj = order;
        const _prop = _obj.items;
        return typeof _prop === "function" ? _prop.call(_obj) : _prop;
      })().reduce(function(sum, item) {
        return sum + (() => {
          const _obj = item;
          const _prop = _obj.price;
          return typeof _prop === "function" ? _prop.call(_obj) : _prop;
        })();
      }, 0),
      date: (() => {
        const _obj = (() => {
          const _obj2 = order;
          const _prop2 = _obj2.date;
          return typeof _prop2 === "function" ? _prop2.call(_obj2) : _prop2;
        })();
        const _prop = _obj.toDateString;
        return typeof _prop === "function" ? _prop.call(_obj) : _prop;
      })(),
      customer: (() => {
        const _obj = (() => {
          const _obj2 = order;
          const _prop2 = _obj2.customer;
          return typeof _prop2 === "function" ? _prop2.call(_obj2) : _prop2;
        })();
        const _prop = _obj.name;
        return typeof _prop === "function" ? _prop.call(_obj) : _prop;
      })()
    };
  }).sort(function(a, b) {
    return (() => {
      const _obj = b;
      const _prop = _obj.total;
      return typeof _prop === "function" ? _prop.call(_obj) : _prop;
    })() - (() => {
      const _obj = a;
      const _prop = _obj.total;
      return typeof _prop === "function" ? _prop.call(_obj) : _prop;
    })();
  });
}
console.log("Processed orders: ", processOrders(orders));
console.log("\\n========== ADVANCED TEXT PROCESSING ==========");
console.log("\\n========== END OF SHOWCASE ==========");
//# sourceMappingURL=data:application/json;base64,
