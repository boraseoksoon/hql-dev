// .hql-cache/1/doc/examples/fx+loop.ts
function generate_numbers_fx(...args) {
  let count = 0;
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && !Array.isArray(args[0])) {
    if (args[0]["count"] !== void 0)
      count = args[0]["count"];
    if (count === void 0 && args.length > 0)
      count = args[0];
  } else {
    if (args.length > 0)
      count = args[0];
  }
  count = typeof count === "object" && count !== null ? JSON.parse(JSON.stringify(count)) : count;
  count = typeof count === "object" && count !== null ? JSON.parse(JSON.stringify(count)) : count;
  return function() {
    const result = [];
    (function() {
      function loop_11(i, result2) {
        if (i >= count)
          return result2;
        else
          return loop_11(i + 1, result2.concat([i]));
      }
      return loop_11(0, result);
    })();
    return function() {
      function loop_11(i, result2) {
        if (i >= count)
          return result2;
        else
          return loop_11(i + 1, result2.concat([i]));
      }
      return loop_11(0, result);
    }();
  }();
}
function generate_numbers_fn(count) {
  return function() {
    const result = [];
    (function() {
      function loop_12(i, result2) {
        if (i >= count)
          return result2;
        else
          return loop_12(i + 1, result2.concat([i]));
      }
      return loop_12(0, result);
    })();
    return function() {
      function loop_12(i, result2) {
        if (i >= count)
          return result2;
        else
          return loop_12(i + 1, result2.concat([i]));
      }
      return loop_12(0, result);
    }();
  }();
}
console.log("FX implementation result:");
console.log(generate_numbers_fx(5));
console.log("FN implementation result:");
console.log(generate_numbers_fn(5));
function generate_nested(rows, cols) {
  return function() {
    const result = [];
    (function() {
      function loop_13(i, result2) {
        if (i >= rows)
          return result2;
        else
          return function() {
            const row = [];
            (function() {
              const filled_row = function() {
                function loop_14(j, row2) {
                  if (j >= cols)
                    return row2;
                  else
                    return loop_14(j + 1, row2.concat([i * j]));
                }
                return loop_14(0, row);
              }();
              return loop_13(i + 1, result2.concat([filled_row]));
            })();
            return function() {
              const filled_row = function() {
                function loop_14(j, row2) {
                  if (j >= cols)
                    return row2;
                  else
                    return loop_14(j + 1, row2.concat([i * j]));
                }
                return loop_14(0, row);
              }();
              return loop_13(i + 1, result2.concat([filled_row]));
            }();
          }();
      }
      return loop_13(0, result);
    })();
    return function() {
      function loop_13(i, result2) {
        if (i >= rows)
          return result2;
        else
          return function() {
            const row = [];
            (function() {
              const filled_row = function() {
                function loop_14(j, row2) {
                  if (j >= cols)
                    return row2;
                  else
                    return loop_14(j + 1, row2.concat([i * j]));
                }
                return loop_14(0, row);
              }();
              return loop_13(i + 1, result2.concat([filled_row]));
            })();
            return function() {
              const filled_row = function() {
                function loop_14(j, row2) {
                  if (j >= cols)
                    return row2;
                  else
                    return loop_14(j + 1, row2.concat([i * j]));
                }
                return loop_14(0, row);
              }();
              return loop_13(i + 1, result2.concat([filled_row]));
            }();
          }();
      }
      return loop_13(0, result);
    }();
  }();
}
console.log("Nested result:");
console.log(generate_nested(3, 4));
//# sourceMappingURL=data:application/json;base64,
