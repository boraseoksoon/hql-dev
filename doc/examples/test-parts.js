// .hql-cache/1/doc/examples/test-parts.ts
function range(n) {
  let result = [];
  (function() {
    function loop_23(i) {
      if (i < n)
        return function() {
          result = concat(result, [i]);
          return (() => loop_23(i + 1))();
        }();
      else
        return null;
    }
    return loop_23(0);
  })();
  return result;
}
function concat(a, b) {
  return a.concat(b);
}
console.log("=== TEST 1: Range ===");
var r = range(5);
console.log("Range result:", r);
console.log("Type:", typeof r);
console.log("Length:", r === null ? 0 : r.length);
console.log("Element 0:", r[0]);
console.log("Element 1:", r[1]);
console.log("\\n=== TEST 2: Get ===");
var arr = [10, 20, 30];
console.log("Array:", arr);
console.log("Get 0:", arr[0]);
console.log("Get 1:", arr[1]);
console.log("\\n=== TEST 3: Pass to function ===");
function test_param(coll) {
  console.log("Received:", coll);
  console.log("Type:", typeof coll);
  return console.log("Get 0:", coll[0]);
}
test_param(r);
test_param(arr);
console.log("\\n=== TEST 4: Take with literal ===");
function take(n, coll) {
  console.log("Take called with n:", n, "coll:", coll);
  let result = [];
  (function() {
    function loop_24(i) {
      if (i < n)
        return function() {
          let elem = coll[i];
          console.log("  Element", i, ":", elem);
          result = concat(result, [elem]);
          return (() => loop_24(i + 1))();
        }();
      else
        return null;
    }
    return loop_24(0);
  })();
  return result;
}
console.log("Result:", take(3, [100, 200, 300, 400]));
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy90ZXN0LXBhcnRzLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJmdW5jdGlvbiByYW5nZShuKSB7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGxvb3BfMjMoaSkge1xuICAgICAgICAgICAgaWYgKGkgPCBuKVxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvbmNhdChyZXN1bHQsIFtpXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKCkgPT4gbG9vcF8yMyhpICsgMSkpKCk7XG4gICAgICAgICAgICAgICAgfSgpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb29wXzIzKDApO1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbmNhdChhLCBiKSB7XG4gICAgcmV0dXJuIGEuY29uY2F0KGIpO1xufVxuY29uc29sZS5sb2coXCI9PT0gVEVTVCAxOiBSYW5nZSA9PT1cIik7XG5sZXQgciA9IHJhbmdlKDUpO1xuY29uc29sZS5sb2coXCJSYW5nZSByZXN1bHQ6XCIsIHIpO1xuY29uc29sZS5sb2coXCJUeXBlOlwiLCB0eXBlb2YocikpO1xuY29uc29sZS5sb2coXCJMZW5ndGg6XCIsIHIgPT09IG51bGwgPyAwIDogci5sZW5ndGgpO1xuY29uc29sZS5sb2coXCJFbGVtZW50IDA6XCIsIHJbMF0pO1xuY29uc29sZS5sb2coXCJFbGVtZW50IDE6XCIsIHJbMV0pO1xuY29uc29sZS5sb2coXCJcXFxcbj09PSBURVNUIDI6IEdldCA9PT1cIik7XG5sZXQgYXJyID0gWzEwLCAyMCwgMzBdO1xuY29uc29sZS5sb2coXCJBcnJheTpcIiwgYXJyKTtcbmNvbnNvbGUubG9nKFwiR2V0IDA6XCIsIGFyclswXSk7XG5jb25zb2xlLmxvZyhcIkdldCAxOlwiLCBhcnJbMV0pO1xuY29uc29sZS5sb2coXCJcXFxcbj09PSBURVNUIDM6IFBhc3MgdG8gZnVuY3Rpb24gPT09XCIpO1xuZnVuY3Rpb24gdGVzdF9wYXJhbShjb2xsKSB7XG4gICAgY29uc29sZS5sb2coXCJSZWNlaXZlZDpcIiwgY29sbCk7XG4gICAgY29uc29sZS5sb2coXCJUeXBlOlwiLCB0eXBlb2YoY29sbCkpO1xuICAgIHJldHVybiBjb25zb2xlLmxvZyhcIkdldCAwOlwiLCBjb2xsWzBdKTtcbn1cbnRlc3RfcGFyYW0ocik7XG50ZXN0X3BhcmFtKGFycik7XG5jb25zb2xlLmxvZyhcIlxcXFxuPT09IFRFU1QgNDogVGFrZSB3aXRoIGxpdGVyYWwgPT09XCIpO1xuZnVuY3Rpb24gdGFrZShuLCBjb2xsKSB7XG4gICAgY29uc29sZS5sb2coXCJUYWtlIGNhbGxlZCB3aXRoIG46XCIsIG4sIFwiY29sbDpcIiwgY29sbCk7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGxvb3BfMjQoaSkge1xuICAgICAgICAgICAgaWYgKGkgPCBuKVxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlbGVtID0gY29sbFtpXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIgIEVsZW1lbnRcIiwgaSwgXCI6XCIsIGVsZW0pO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjb25jYXQocmVzdWx0LCBbZWxlbV0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCgpID0+IGxvb3BfMjQoaSArIDEpKSgpO1xuICAgICAgICAgICAgICAgIH0oKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9vcF8yNCgwKTtcbiAgICB9KSgpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zb2xlLmxvZyhcIlJlc3VsdDpcIiwgdGFrZSgzLCBbMTAwLCAyMDAsIDMwMCwgNDAwXSkpO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsTUFBTSxHQUFHO0FBQ2QsTUFBSSxTQUFTLENBQUM7QUFDZCxHQUFDLFdBQVk7QUFDVCxhQUFTLFFBQVEsR0FBRztBQUNoQixVQUFJLElBQUk7QUFDSixlQUFPLFdBQVk7QUFDZixtQkFBUyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDM0Isa0JBQVEsTUFBTSxRQUFRLElBQUksQ0FBQyxHQUFHO0FBQUEsUUFDbEMsRUFBRTtBQUFBO0FBRUYsZUFBTztBQUFBLElBQ2Y7QUFDQSxXQUFPLFFBQVEsQ0FBQztBQUFBLEVBQ3BCLEdBQUc7QUFDSCxTQUFPO0FBQ1g7QUFDQSxTQUFTLE9BQU8sR0FBRyxHQUFHO0FBQ2xCLFNBQU8sRUFBRSxPQUFPLENBQUM7QUFDckI7QUFDQSxRQUFRLElBQUksdUJBQXVCO0FBQ25DLElBQUksSUFBSSxNQUFNLENBQUM7QUFDZixRQUFRLElBQUksaUJBQWlCLENBQUM7QUFDOUIsUUFBUSxJQUFJLFNBQVMsT0FBTyxDQUFFO0FBQzlCLFFBQVEsSUFBSSxXQUFXLE1BQU0sT0FBTyxJQUFJLEVBQUUsTUFBTTtBQUNoRCxRQUFRLElBQUksY0FBYyxFQUFFLENBQUMsQ0FBQztBQUM5QixRQUFRLElBQUksY0FBYyxFQUFFLENBQUMsQ0FBQztBQUM5QixRQUFRLElBQUksd0JBQXdCO0FBQ3BDLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFO0FBQ3JCLFFBQVEsSUFBSSxVQUFVLEdBQUc7QUFDekIsUUFBUSxJQUFJLFVBQVUsSUFBSSxDQUFDLENBQUM7QUFDNUIsUUFBUSxJQUFJLFVBQVUsSUFBSSxDQUFDLENBQUM7QUFDNUIsUUFBUSxJQUFJLHFDQUFxQztBQUNqRCxTQUFTLFdBQVcsTUFBTTtBQUN0QixVQUFRLElBQUksYUFBYSxJQUFJO0FBQzdCLFVBQVEsSUFBSSxTQUFTLE9BQU8sSUFBSztBQUNqQyxTQUFPLFFBQVEsSUFBSSxVQUFVLEtBQUssQ0FBQyxDQUFDO0FBQ3hDO0FBQ0EsV0FBVyxDQUFDO0FBQ1osV0FBVyxHQUFHO0FBQ2QsUUFBUSxJQUFJLHNDQUFzQztBQUNsRCxTQUFTLEtBQUssR0FBRyxNQUFNO0FBQ25CLFVBQVEsSUFBSSx1QkFBdUIsR0FBRyxTQUFTLElBQUk7QUFDbkQsTUFBSSxTQUFTLENBQUM7QUFDZCxHQUFDLFdBQVk7QUFDVCxhQUFTLFFBQVEsR0FBRztBQUNoQixVQUFJLElBQUk7QUFDSixlQUFPLFdBQVk7QUFDZixjQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLGtCQUFRLElBQUksYUFBYSxHQUFHLEtBQUssSUFBSTtBQUNyQyxtQkFBUyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDOUIsa0JBQVEsTUFBTSxRQUFRLElBQUksQ0FBQyxHQUFHO0FBQUEsUUFDbEMsRUFBRTtBQUFBO0FBRUYsZUFBTztBQUFBLElBQ2Y7QUFDQSxXQUFPLFFBQVEsQ0FBQztBQUFBLEVBQ3BCLEdBQUc7QUFDSCxTQUFPO0FBQ1g7QUFDQSxRQUFRLElBQUksV0FBVyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxHQUFHLENBQUMsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
