// ../.hql-cache/doc/examples/return.ts
console.log("\\n=== Testing Return Behavior in HQL ===\\n");
console.log("\\n## fx Function Return Tests ##\\n");
function implicit_return_fx(...args) {
  let x = 0;
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && !Array.isArray(args[0])) {
    if (args[0]["x"] !== void 0)
      x = args[0]["x"];
    if (x === void 0 && args.length > 0)
      x = args[0];
  } else {
    if (args.length > 0)
      x = args[0];
  }
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  return function() {
    const doubled = x * 2;
    doubled;
    return doubled;
  }();
}
console.log("fx implicit return: ", implicit_return_fx(5));
function explicit_return_fx(...args) {
  let x = 0;
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && !Array.isArray(args[0])) {
    if (args[0]["x"] !== void 0)
      x = args[0]["x"];
    if (x === void 0 && args.length > 0)
      x = args[0];
  } else {
    if (args.length > 0)
      x = args[0];
  }
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  return function() {
    const doubled = x * 2;
    return doubled;
  }();
}
console.log("fx explicit return: ", explicit_return_fx(5));
function early_return_fx(...args) {
  let x = 0;
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && !Array.isArray(args[0])) {
    if (args[0]["x"] !== void 0)
      x = args[0]["x"];
    if (x === void 0 && args.length > 0)
      x = args[0];
  } else {
    if (args.length > 0)
      x = args[0];
  }
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  return x < 0 ? (() => 0)() : x * 2;
}
console.log("fx early return (negative): ", early_return_fx(-5));
console.log("fx no early return (positive): ", early_return_fx(5));
function multi_return_fx(...args) {
  let x = 0;
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && !Array.isArray(args[0])) {
    if (args[0]["x"] !== void 0)
      x = args[0]["x"];
    if (x === void 0 && args.length > 0)
      x = args[0];
  } else {
    if (args.length > 0)
      x = args[0];
  }
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  return x < 0 ? (() => 0)() : x > 10 ? (() => 100)() : (() => x)();
}
console.log("fx multi-return (negative): ", multi_return_fx(-5));
console.log("fx multi-return (large): ", multi_return_fx(15));
console.log("fx multi-return (normal): ", multi_return_fx(7));
function mixed_return_fx(...args) {
  let x = 0;
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && !Array.isArray(args[0])) {
    if (args[0]["x"] !== void 0)
      x = args[0]["x"];
    if (x === void 0 && args.length > 0)
      x = args[0];
  } else {
    if (args.length > 0)
      x = args[0];
  }
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  return x < 0 ? (() => 0)() : x * 2;
}
console.log("fx mixed return (negative): ", mixed_return_fx(-5));
console.log("fx mixed return (positive): ", mixed_return_fx(5));
console.log("\\n## fn Function Return Tests ##\\n");
function implicit_return_fn(x) {
  return function() {
    const doubled = x * 2;
    doubled;
    return doubled;
  }();
}
console.log("fn implicit return: ", implicit_return_fn(5));
function explicit_return_fn(x) {
  return function() {
    const doubled = x * 2;
    return doubled;
  }();
}
console.log("fn explicit return: ", explicit_return_fn(5));
function early_return_fn(x) {
  return x < 0 ? (() => 0)() : x * 2;
}
console.log("fn early return (negative): ", early_return_fn(-5));
console.log("fn no early return (positive): ", early_return_fn(5));
function multi_return_fn(x) {
  return x < 0 ? (() => 0)() : x > 10 ? (() => 100)() : (() => x)();
}
console.log("fn multi-return (negative): ", multi_return_fn(-5));
console.log("fn multi-return (large): ", multi_return_fn(15));
console.log("fn multi-return (normal): ", multi_return_fn(7));
function mixed_return_fn(x) {
  return x < 0 ? (() => 0)() : x * 2;
}
console.log("fn mixed return (negative): ", mixed_return_fn(-5));
console.log("fn mixed return (positive): ", mixed_return_fn(5));
console.log("\\n## Lambda Return Tests ##\\n");
(function() {
  const implicit_lambda = function(x) {
    return x * 2;
  };
  console.log("lambda implicit return: ", implicit_lambda[5]);
  return console.log("lambda implicit return: ", implicit_lambda[5]);
})();
(function() {
  const explicit_lambda = function(x) {
    return x * 2;
  };
  console.log("lambda explicit return: ", explicit_lambda[5]);
  return console.log("lambda explicit return: ", explicit_lambda[5]);
})();
(function() {
  const early_lambda = function(x) {
    return x < 0 ? (() => 0)() : x * 2;
  };
  console.log("lambda early return (negative): ", early_lambda[-5]);
  console.log("lambda no early return (positive): ", early_lambda[5]);
  return console.log("lambda no early return (positive): ", early_lambda[5]);
})();
(function() {
  const multi_lambda = function(x) {
    return function() {
      const a = x * 2;
      (function() {
        const b = a + 1;
        b;
        return b;
      })();
      return function() {
        const b = a + 1;
        b;
        return b;
      }();
    }();
  };
  console.log("lambda multi-statement: ", multi_lambda[5]);
  return console.log("lambda multi-statement: ", multi_lambda[5]);
})();
(function() {
  const multi_explicit_lambda = function(x) {
    return function() {
      const a = x * 2;
      (function() {
        const b = a + 1;
        return b;
      })();
      return function() {
        const b = a + 1;
        return b;
      }();
    }();
  };
  console.log("lambda multi-statement explicit: ", multi_explicit_lambda[5]);
  return console.log("lambda multi-statement explicit: ", multi_explicit_lambda[5]);
})();
console.log("\\n## Nested Function Return Tests ##\\n");
function nested_fn_lambda(x) {
  return function() {
    const inner_lambda = function(y) {
      return y < 0 ? (() => 0)() : y * 2;
    };
    inner_lambda.x;
    return inner_lambda.x;
  }();
}
console.log("nested fn/lambda (negative): ", nested_fn_lambda(-5));
console.log("nested fn/lambda (positive): ", nested_fn_lambda(5));
function nested_fx_lambda(...args) {
  let x = 0;
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && !Array.isArray(args[0])) {
    if (args[0]["x"] !== void 0)
      x = args[0]["x"];
    if (x === void 0 && args.length > 0)
      x = args[0];
  } else {
    if (args.length > 0)
      x = args[0];
  }
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  x = typeof x === "object" && x !== null ? JSON.parse(JSON.stringify(x)) : x;
  return function() {
    const inner_lambda = function(y) {
      return y < 0 ? (() => 0)() : y * 2;
    };
    return inner_lambda.x;
  }();
}
console.log("nested fx/lambda (negative): ", nested_fx_lambda(-5));
console.log("nested fx/lambda (positive): ", nested_fx_lambda(5));
function complex_nested(condition) {
  return function() {
    const inner_fn = function(x) {
      return x < 0 ? (() => -1)() : x * 2;
    };
    condition ? inner_fn[5] : (() => -999)();
    return condition ? inner_fn[5] : (() => -999)();
  }();
}
console.log("complex nested (true): ", complex_nested(true));
console.log("complex nested (false): ", complex_nested(false));
console.log("\\n## Return Edge Cases ##\\n");
function empty_with_return() {
  return 42;
}
console.log("empty body with return: ", empty_with_return());
function nested_block_return(x) {
  return function() {
    const a = 10;
    (function() {
      const b = 20;
      x > 0 ? (() => a + b)() : a - b;
      return x > 0 ? (() => a + b)() : a - b;
    })();
    return function() {
      const b = 20;
      x > 0 ? (() => a + b)() : a - b;
      return x > 0 ? (() => a + b)() : a - b;
    }();
  }();
}
console.log("nested block return (positive): ", nested_block_return(5));
console.log("nested block return (negative): ", nested_block_return(-5));
function return_complex() {
  return {
    name: "John",
    age: 30,
    scores: [85, 90, 95]
  };
}
console.log("return complex: ", return_complex());
function sequential_returns(x) {
  return x + 1;
}
console.log("sequential returns: ", sequential_returns(10));
function sequential_returns2(x) {
  x + 1;
  return x + 2;
}
console.log("sequential returns: ", sequential_returns2(10));
function sequential_returns3(x) {
  x + 1;
  x + 2;
  return x + 3;
}
console.log("sequential returns: ", sequential_returns3(10));
function deep_conditional_return(x) {
  return x > 10 ? x > 20 ? x > 30 ? "very large" : "large" : "medium" : "small";
}
console.log("deep conditional (40): ", deep_conditional_return(40));
console.log("deep conditional (25): ", deep_conditional_return(25));
console.log("deep conditional (15): ", deep_conditional_return(15));
console.log("deep conditional (5): ", deep_conditional_return(5));
console.log("\\n## Return in Function Arguments ##\\n");
function add_one(x) {
  return x + 1;
}
function return_as_arg(condition) {
  return add_one(condition ? 10 : (() => 0)());
}
console.log("return as argument (true): ", return_as_arg(true));
console.log("return as argument (false): ", return_as_arg(false));
console.log("\\n## Function Composition with Return ##\\n");
function outer(x) {
  return function() {
    const result = middle.x;
    result + 1e3;
    return result + 1e3;
  }();
}
function middle(x) {
  return x < 0 ? (() => -1)() : inner.x;
}
function inner(x) {
  return x < 10 ? (() => 0)() : x * 10;
}
console.log("function chain (negative): ", outer(-5));
console.log("function chain (small): ", outer(5));
console.log("function chain (large): ", outer(15));
console.log("\\n=== Return Tests Complete ===\\n");
//# sourceMappingURL=data:application/json;base64,
