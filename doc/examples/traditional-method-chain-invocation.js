// .hql-cache/1/doc/examples/traditional-method-chain-invocation.ts
var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var words = ["apple", "banana", "cherry", "date", "elderberry", "fig", "grape"];
var text = "   The quick brown fox jumps over the lazy dog   ";
var person = {
  name: "John",
  age: 30,
  hobbies: ["coding", "reading", "hiking"]
};
console.log("========== BASIC METHOD CHAINS ==========");
console.log("\\n1. Double all even numbers:");
console.log(numbers.filter(function(n) {
  return n % 2 === 0;
}).map(function(n) {
  return n * 2;
}));
var evenNumbers = numbers.filter(function(n) {
  return n % 2 === 0;
});
console.log("Even numbers (for debug): ", evenNumbers);
console.log(evenNumbers.map(function(n) {
  return n * 2;
}));
console.log("\\n2. Triple chain - filter > 5, multiply by 2, then sort descending:");
console.log(numbers.filter(function(n) {
  return n > 5;
}).map(function(n) {
  return n * 2;
}).sort(function(a, b) {
  return b - a;
}));
console.log("\\n3. Four-method chain - filter, map, sort, then join:");
console.log(numbers.filter(function(n) {
  return n > 3;
}).map(function(n) {
  return n * 10;
}).sort(function(a, b) {
  return a - b;
}).join(", "));
console.log("\\n4. Complex filtering condition:");
console.log(numbers.filter(function(n) {
  return n > 2 ? n < 8 : n > 2;
}));
console.log("\\n========== STRING METHOD CHAINS ==========");
console.log("\\n5. String trimming, uppercase, and splitting:");
console.log(text.trim().toUpperCase().split(" "));
console.log("\\n6. Substring and length:");
console.log(text.substring(3, 20) === null ? 0 : text.substring(3, 20).length);
console.log("\\n7. Multiple string transformations:");
console.log(text.trim().toLowerCase().split(" ").filter(function(word) {
  return (word === null ? 0 : word.length) > 3;
}).join("-"));
console.log("\\n========== ARRAY ADVANCED OPERATIONS ==========");
console.log("\\n8. Filter, map, reduce chain:");
console.log(numbers.filter(function(n) {
  return n > 5;
}).map(function(n) {
  return n * 2;
}).reduce(function(acc, curr) {
  return acc + curr;
}, 0));
console.log("\\n9. Finding max value with reduce:");
console.log(numbers.reduce(function(max, curr) {
  return curr > max ? curr : max;
}, Array.from(numbers).shift()));
console.log("\\n10. Flat map operation:");
console.log(words.flatMap(function(word) {
  return [word, word === null ? 0 : word.length];
}));
console.log("\\n11. Array reduction to object:");
console.log(words.reduce(function(obj, word) {
  obj[word] = word === null ? 0 : word.length;
  return obj;
}, {}));
console.log("\\n========== OBJECT PROPERTY METHOD CHAINS ==========");
console.log("\\n12. Method chains with object properties:");
console.log(person["hobbies"].filter(function(hobby) {
  return (hobby === null ? 0 : hobby.length) > 5;
}).map(function(h) {
  return h.toUpperCase();
}).join(" & "));
console.log("\\n13. Convert object to array and manipulate:");
console.log(Object.entries(person).filter(function(entry) {
  return (() => {
    try {
      const result = entry[0];
      return result !== void 0 ? result : entry(0);
    } catch (_) {
      return entry(0);
    }
  })() === "age" ? false : true;
}).map(function(entry) {
  return entry.join(": ");
}));
console.log("\\n========== NESTED METHOD CALLS WITH COMBINATIONS ==========");
console.log("\\n14. Deeply nested method chain with different arrays:");
console.log(numbers.concat([11, 12, 13, 14, 15]).filter(function(n) {
  return n % 3 === 0;
}).map(function(n) {
  return n * numbers.filter(function(x) {
    return x < n;
  }).reduce(function(acc, curr) {
    return acc + curr;
  }, 0);
}));
console.log("\\n15. Complex object method call:");
console.log(person["name"].toLowerCase().split("").join(person["hobbies"].map(function(h) {
  return h.substring(0, 1);
})) === null ? 0 : person["name"].toLowerCase().split("").join(person["hobbies"].map(function(h) {
  return h.substring(0, 1);
})).length);
console.log("\\n========== METHOD CHAINS WITH MATH FUNCTIONS ==========");
console.log("\\n16. Math functions in chains:");
console.log(numbers.map(function(n) {
  return Math.min(100, Math.pow(n, 2), Math.round(n * 5.5));
}));
console.log("\\n17. JSON stringify/parse method chain:");
console.log(Object.keys(JSON.parse(JSON.stringify(person))).map(function(key) {
  return key.toUpperCase();
}));
console.log("\\n========== NESTED METHOD CALLS WITH CONDITIONALS ==========");
console.log("\\n18. Conditional method selection:");
console.log(numbers.map(function(n) {
  return n < 5 ? n.toString(2) : n.toString(16);
}));
console.log("\\n19. Mixed array and string methods:");
console.log(words.map(function(word) {
  return (word === null ? 0 : word.length) < 6 ? word.repeat(2) : word.substring(0, 5);
}));
console.log("\\n========== END OF EXAMPLES ==========");
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy90cmFkaXRpb25hbC1tZXRob2QtY2hhaW4taW52b2NhdGlvbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsibGV0IG51bWJlcnMgPSBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xubGV0IHdvcmRzID0gW1wiYXBwbGVcIiwgXCJiYW5hbmFcIiwgXCJjaGVycnlcIiwgXCJkYXRlXCIsIFwiZWxkZXJiZXJyeVwiLCBcImZpZ1wiLCBcImdyYXBlXCJdO1xubGV0IHRleHQgPSBcIiAgIFRoZSBxdWljayBicm93biBmb3gganVtcHMgb3ZlciB0aGUgbGF6eSBkb2cgICBcIjtcbmxldCBwZXJzb24gPSB7XG4gICAgbmFtZTogXCJKb2huXCIsXG4gICAgYWdlOiAzMCxcbiAgICBob2JiaWVzOiBbXCJjb2RpbmdcIiwgXCJyZWFkaW5nXCIsIFwiaGlraW5nXCJdXG59O1xuY29uc29sZS5sb2coXCI9PT09PT09PT09IEJBU0lDIE1FVEhPRCBDSEFJTlMgPT09PT09PT09PVwiKTtcbmNvbnNvbGUubG9nKFwiXFxcXG4xLiBEb3VibGUgYWxsIGV2ZW4gbnVtYmVyczpcIik7XG5jb25zb2xlLmxvZyhudW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBuICUgMiA9PT0gMDtcbn0pLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBuICogMjtcbn0pKTtcbmxldCBldmVuTnVtYmVycyA9IG51bWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gJSAyID09PSAwO1xufSk7XG5jb25zb2xlLmxvZyhcIkV2ZW4gbnVtYmVycyAoZm9yIGRlYnVnKTogXCIsIGV2ZW5OdW1iZXJzKTtcbmNvbnNvbGUubG9nKGV2ZW5OdW1iZXJzLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBuICogMjtcbn0pKTtcbmNvbnNvbGUubG9nKFwiXFxcXG4yLiBUcmlwbGUgY2hhaW4gLSBmaWx0ZXIgPiA1LCBtdWx0aXBseSBieSAyLCB0aGVuIHNvcnQgZGVzY2VuZGluZzpcIik7XG5jb25zb2xlLmxvZyhudW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBuID4gNTtcbn0pLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBuICogMjtcbn0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGE7XG59KSk7XG5jb25zb2xlLmxvZyhcIlxcXFxuMy4gRm91ci1tZXRob2QgY2hhaW4gLSBmaWx0ZXIsIG1hcCwgc29ydCwgdGhlbiBqb2luOlwiKTtcbmNvbnNvbGUubG9nKG51bWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gPiAzO1xufSkubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gKiAxMDtcbn0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG59KS5qb2luKFwiLCBcIikpO1xuY29uc29sZS5sb2coXCJcXFxcbjQuIENvbXBsZXggZmlsdGVyaW5nIGNvbmRpdGlvbjpcIik7XG5jb25zb2xlLmxvZyhudW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBuID4gMiA/IG4gPCA4IDogbiA+IDI7XG59KSk7XG5jb25zb2xlLmxvZyhcIlxcXFxuPT09PT09PT09PSBTVFJJTkcgTUVUSE9EIENIQUlOUyA9PT09PT09PT09XCIpO1xuY29uc29sZS5sb2coXCJcXFxcbjUuIFN0cmluZyB0cmltbWluZywgdXBwZXJjYXNlLCBhbmQgc3BsaXR0aW5nOlwiKTtcbmNvbnNvbGUubG9nKHRleHQudHJpbSgpLnRvVXBwZXJDYXNlKCkuc3BsaXQoXCIgXCIpKTtcbmNvbnNvbGUubG9nKFwiXFxcXG42LiBTdWJzdHJpbmcgYW5kIGxlbmd0aDpcIik7XG5jb25zb2xlLmxvZyh0ZXh0LnN1YnN0cmluZygzLCAyMCkgPT09IG51bGwgPyAwIDogdGV4dC5zdWJzdHJpbmcoMywgMjApLmxlbmd0aCk7XG5jb25zb2xlLmxvZyhcIlxcXFxuNy4gTXVsdGlwbGUgc3RyaW5nIHRyYW5zZm9ybWF0aW9uczpcIik7XG5jb25zb2xlLmxvZyh0ZXh0LnRyaW0oKS50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiIFwiKS5maWx0ZXIoZnVuY3Rpb24gKHdvcmQpIHtcbiAgICByZXR1cm4gKHdvcmQgPT09IG51bGwgPyAwIDogd29yZC5sZW5ndGgpID4gMztcbn0pLmpvaW4oXCItXCIpKTtcbmNvbnNvbGUubG9nKFwiXFxcXG49PT09PT09PT09IEFSUkFZIEFEVkFOQ0VEIE9QRVJBVElPTlMgPT09PT09PT09PVwiKTtcbmNvbnNvbGUubG9nKFwiXFxcXG44LiBGaWx0ZXIsIG1hcCwgcmVkdWNlIGNoYWluOlwiKTtcbmNvbnNvbGUubG9nKG51bWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gPiA1O1xufSkubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gKiAyO1xufSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnIpIHtcbiAgICByZXR1cm4gYWNjICsgY3Vycjtcbn0sIDApKTtcbmNvbnNvbGUubG9nKFwiXFxcXG45LiBGaW5kaW5nIG1heCB2YWx1ZSB3aXRoIHJlZHVjZTpcIik7XG5jb25zb2xlLmxvZyhudW1iZXJzLnJlZHVjZShmdW5jdGlvbiAobWF4LCBjdXJyKSB7XG4gICAgcmV0dXJuIGN1cnIgPiBtYXggPyBjdXJyIDogbWF4O1xufSwgQXJyYXkuZnJvbShudW1iZXJzKS5zaGlmdCgpKSk7XG5jb25zb2xlLmxvZyhcIlxcXFxuMTAuIEZsYXQgbWFwIG9wZXJhdGlvbjpcIik7XG5jb25zb2xlLmxvZyh3b3Jkcy5mbGF0TWFwKGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgcmV0dXJuIFt3b3JkLCB3b3JkID09PSBudWxsID8gMCA6IHdvcmQubGVuZ3RoXTtcbn0pKTtcbmNvbnNvbGUubG9nKFwiXFxcXG4xMS4gQXJyYXkgcmVkdWN0aW9uIHRvIG9iamVjdDpcIik7XG5jb25zb2xlLmxvZyh3b3Jkcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwgd29yZCkge1xuICAgIG9ialt3b3JkXSA9IHdvcmQgPT09IG51bGwgPyAwIDogd29yZC5sZW5ndGg7XG4gICAgcmV0dXJuIG9iajtcbn0sIHt9KSk7XG5jb25zb2xlLmxvZyhcIlxcXFxuPT09PT09PT09PSBPQkpFQ1QgUFJPUEVSVFkgTUVUSE9EIENIQUlOUyA9PT09PT09PT09XCIpO1xuY29uc29sZS5sb2coXCJcXFxcbjEyLiBNZXRob2QgY2hhaW5zIHdpdGggb2JqZWN0IHByb3BlcnRpZXM6XCIpO1xuY29uc29sZS5sb2cocGVyc29uW1wiaG9iYmllc1wiXS5maWx0ZXIoZnVuY3Rpb24gKGhvYmJ5KSB7XG4gICAgcmV0dXJuIChob2JieSA9PT0gbnVsbCA/IDAgOiBob2JieS5sZW5ndGgpID4gNTtcbn0pLm1hcChmdW5jdGlvbiAoaCkge1xuICAgIHJldHVybiBoLnRvVXBwZXJDYXNlKCk7XG59KS5qb2luKFwiICYgXCIpKTtcbmNvbnNvbGUubG9nKFwiXFxcXG4xMy4gQ29udmVydCBvYmplY3QgdG8gYXJyYXkgYW5kIG1hbmlwdWxhdGU6XCIpO1xuY29uc29sZS5sb2coT2JqZWN0LmVudHJpZXMocGVyc29uKS5maWx0ZXIoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuICgoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBlbnRyeVswXTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgIT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGVudHJ5KDApO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfKSB7XG4gICAgICAgICAgICByZXR1cm4gZW50cnkoMCk7XG4gICAgICAgIH1cbiAgICB9KSgpID09PSBcImFnZVwiID8gZmFsc2UgOiB0cnVlO1xufSkubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiBlbnRyeS5qb2luKFwiOiBcIik7XG59KSk7XG5jb25zb2xlLmxvZyhcIlxcXFxuPT09PT09PT09PSBORVNURUQgTUVUSE9EIENBTExTIFdJVEggQ09NQklOQVRJT05TID09PT09PT09PT1cIik7XG5jb25zb2xlLmxvZyhcIlxcXFxuMTQuIERlZXBseSBuZXN0ZWQgbWV0aG9kIGNoYWluIHdpdGggZGlmZmVyZW50IGFycmF5czpcIik7XG5jb25zb2xlLmxvZyhudW1iZXJzLmNvbmNhdChbMTEsIDEyLCAxMywgMTQsIDE1XSkuZmlsdGVyKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gJSAzID09PSAwO1xufSkubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gKiBudW1iZXJzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geCA8IG47XG4gICAgfSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnIpIHtcbiAgICAgICAgcmV0dXJuIGFjYyArIGN1cnI7XG4gICAgfSwgMCk7XG59KSk7XG5jb25zb2xlLmxvZyhcIlxcXFxuMTUuIENvbXBsZXggb2JqZWN0IG1ldGhvZCBjYWxsOlwiKTtcbmNvbnNvbGUubG9nKHBlcnNvbltcIm5hbWVcIl0udG9Mb3dlckNhc2UoKS5zcGxpdChcIlwiKS5qb2luKHBlcnNvbltcImhvYmJpZXNcIl0ubWFwKGZ1bmN0aW9uIChoKSB7XG4gICAgcmV0dXJuIGguc3Vic3RyaW5nKDAsIDEpO1xufSkpID09PSBudWxsID8gMCA6IHBlcnNvbltcIm5hbWVcIl0udG9Mb3dlckNhc2UoKS5zcGxpdChcIlwiKS5qb2luKHBlcnNvbltcImhvYmJpZXNcIl0ubWFwKGZ1bmN0aW9uIChoKSB7XG4gICAgcmV0dXJuIGguc3Vic3RyaW5nKDAsIDEpO1xufSkpLmxlbmd0aCk7XG5jb25zb2xlLmxvZyhcIlxcXFxuPT09PT09PT09PSBNRVRIT0QgQ0hBSU5TIFdJVEggTUFUSCBGVU5DVElPTlMgPT09PT09PT09PVwiKTtcbmNvbnNvbGUubG9nKFwiXFxcXG4xNi4gTWF0aCBmdW5jdGlvbnMgaW4gY2hhaW5zOlwiKTtcbmNvbnNvbGUubG9nKG51bWJlcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKDEwMCwgTWF0aC5wb3cobiwgMiksIE1hdGgucm91bmQobiAqIDUuNSkpO1xufSkpO1xuY29uc29sZS5sb2coXCJcXFxcbjE3LiBKU09OIHN0cmluZ2lmeS9wYXJzZSBtZXRob2QgY2hhaW46XCIpO1xuY29uc29sZS5sb2coT2JqZWN0LmtleXMoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwZXJzb24pKSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4ga2V5LnRvVXBwZXJDYXNlKCk7XG59KSk7XG5jb25zb2xlLmxvZyhcIlxcXFxuPT09PT09PT09PSBORVNURUQgTUVUSE9EIENBTExTIFdJVEggQ09ORElUSU9OQUxTID09PT09PT09PT1cIik7XG5jb25zb2xlLmxvZyhcIlxcXFxuMTguIENvbmRpdGlvbmFsIG1ldGhvZCBzZWxlY3Rpb246XCIpO1xuY29uc29sZS5sb2cobnVtYmVycy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gbiA8IDUgPyBuLnRvU3RyaW5nKDIpIDogbi50b1N0cmluZygxNik7XG59KSk7XG5jb25zb2xlLmxvZyhcIlxcXFxuMTkuIE1peGVkIGFycmF5IGFuZCBzdHJpbmcgbWV0aG9kczpcIik7XG5jb25zb2xlLmxvZyh3b3Jkcy5tYXAoZnVuY3Rpb24gKHdvcmQpIHtcbiAgICByZXR1cm4gKHdvcmQgPT09IG51bGwgPyAwIDogd29yZC5sZW5ndGgpIDwgNiA/IHdvcmQucmVwZWF0KDIpIDogd29yZC5zdWJzdHJpbmcoMCwgNSk7XG59KSk7XG5jb25zb2xlLmxvZyhcIlxcXFxuPT09PT09PT09PSBFTkQgT0YgRVhBTVBMRVMgPT09PT09PT09PVwiKTtcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxJQUFJLFVBQVUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdB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QUFVLEdBQUc7QUFDbkMsV0FBTyxJQUFJO0FBQUEsRUFDZixDQUFDLEVBQUUsT0FBTyxTQUFVLEtBQUssTUFBTTtBQUMzQixXQUFPLE1BQU07QUFBQSxFQUNqQixHQUFHLENBQUM7QUFDUixDQUFDLENBQUM7QUFDRixRQUFRLElBQUksb0NBQW9DO0FBQ2hELFFBQVEsSUFBSSxPQUFPLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxPQUFPLFNBQVMsRUFBRSxJQUFJLFNBQVUsR0FBRztBQUN2RixTQUFPLEVBQUUsVUFBVSxHQUFHLENBQUM7QUFDM0IsQ0FBQyxDQUFDLE1BQU0sT0FBTyxJQUFJLE9BQU8sTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLE9BQU8sU0FBUyxFQUFFLElBQUksU0FBVSxHQUFHO0FBQzlGLFNBQU8sRUFBRSxVQUFVLEdBQUcsQ0FBQztBQUMzQixDQUFDLENBQUMsRUFBRSxNQUFNO0FBQ1YsUUFBUSxJQUFJLDREQUE0RDtBQUN4RSxRQUFRLElBQUksa0NBQWtDO0FBQzlDLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBVSxHQUFHO0FBQ2pDLFNBQU8sS0FBSyxJQUFJLEtBQUssS0FBSyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEtBQUssTUFBTSxJQUFJLEdBQUcsQ0FBQztBQUM1RCxDQUFDLENBQUM7QUFDRixRQUFRLElBQUksMkNBQTJDO0FBQ3ZELFFBQVEsSUFBSSxPQUFPLEtBQUssS0FBSyxNQUFNLEtBQUssVUFBVSxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksU0FBVSxLQUFLO0FBQzNFLFNBQU8sSUFBSSxZQUFZO0FBQzNCLENBQUMsQ0FBQztBQUNGLFFBQVEsSUFBSSxnRUFBZ0U7QUFDNUUsUUFBUSxJQUFJLHNDQUFzQztBQUNsRCxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVUsR0FBRztBQUNqQyxTQUFPLElBQUksSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFO0FBQ2hELENBQUMsQ0FBQztBQUNGLFFBQVEsSUFBSSx3Q0FBd0M7QUFDcEQsUUFBUSxJQUFJLE1BQU0sSUFBSSxTQUFVLE1BQU07QUFDbEMsVUFBUSxTQUFTLE9BQU8sSUFBSSxLQUFLLFVBQVUsSUFBSSxLQUFLLE9BQU8sQ0FBQyxJQUFJLEtBQUssVUFBVSxHQUFHLENBQUM7QUFDdkYsQ0FBQyxDQUFDO0FBQ0YsUUFBUSxJQUFJLDBDQUEwQzsiLAogICJuYW1lcyI6IFtdCn0K
