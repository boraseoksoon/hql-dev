// ../.hql-cache/doc/examples/traditional-method-chain-invocation.ts
var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var words = ["apple", "banana", "cherry", "date", "elderberry", "fig", "grape"];
var text = "   The quick brown fox jumps over the lazy dog   ";
var person = {
  name: "John",
  age: 30,
  hobbies: ["coding", "reading", "hiking"]
};
console.log("========== BASIC METHOD CHAINS ==========");
console.log("\\n1. Double all even numbers:");
console.log(numbers.filter(function(n) {
  return n % 2 === 0;
}).map(function(n) {
  return n * 2;
}));
var evenNumbers = numbers.filter(function(n) {
  return n % 2 === 0;
});
console.log("Even numbers (for debug): ", evenNumbers);
console.log(evenNumbers.map(function(n) {
  return n * 2;
}));
console.log("\\n2. Triple chain - filter > 5, multiply by 2, then sort descending:");
console.log(numbers.filter(function(n) {
  return n > 5;
}).map(function(n) {
  return n * 2;
}).sort(function(a, b) {
  return b - a;
}));
console.log("\\n3. Four-method chain - filter, map, sort, then join:");
console.log(numbers.filter(function(n) {
  return n > 3;
}).map(function(n) {
  return n * 10;
}).sort(function(a, b) {
  return a - b;
}).join(", "));
console.log("\\n4. Complex filtering condition:");
console.log(numbers.filter(function(n) {
  return n > 2 ? n < 8 : n > 2;
}));
console.log("\\n========== STRING METHOD CHAINS ==========");
console.log("\\n5. String trimming, uppercase, and splitting:");
console.log(text.trim().toUpperCase().split(" "));
console.log("\\n6. Substring and length:");
console.log(text.substring(3, 20) === null ? 0 : text.substring(3, 20).length);
console.log("\\n7. Multiple string transformations:");
console.log(text.trim().toLowerCase().split(" ").filter(function(word) {
  return (word === null ? 0 : word.length) > 3;
}).join("-"));
console.log("\\n========== ARRAY ADVANCED OPERATIONS ==========");
console.log("\\n8. Filter, map, reduce chain:");
console.log(numbers.filter(function(n) {
  return n > 5;
}).map(function(n) {
  return n * 2;
}).reduce(function(acc, curr) {
  return acc + curr;
}, 0));
console.log("\\n9. Finding max value with reduce:");
console.log(numbers.reduce(function(max, curr) {
  return curr > max ? curr : max;
}, Array.from(numbers).shift()));
console.log("\\n10. Flat map operation:");
console.log(words.flatMap(function(word) {
  return [word, word === null ? 0 : word.length];
}));
console.log("\\n11. Array reduction to object:");
console.log(words.reduce(function(obj, word) {
  obj.word = word === null ? 0 : word.length;
  return obj;
}, {}));
console.log("\\n========== OBJECT PROPERTY METHOD CHAINS ==========");
console.log("\\n12. Method chains with object properties:");
console.log(person.hobbies.filter(function(hobby) {
  return (hobby === null ? 0 : hobby.length) > 5;
}).map(function(h) {
  return h.toUpperCase();
}).join(" & "));
console.log("\\n13. Convert object to array and manipulate:");
console.log(Object.entries(person).filter(function(entry) {
  return entry[0] === "age" ? false : true;
}).map(function(entry) {
  return entry.join(": ");
}));
console.log("\\n========== NESTED METHOD CALLS WITH COMBINATIONS ==========");
console.log("\\n14. Deeply nested method chain with different arrays:");
console.log(numbers.concat([11, 12, 13, 14, 15]).filter(function(n) {
  return n % 3 === 0;
}).map(function(n) {
  return n * numbers.filter(function(x) {
    return x < n;
  }).reduce(function(acc, curr) {
    return acc + curr;
  }, 0);
}));
console.log("\\n15. Complex object method call:");
console.log(person.name.toLowerCase().split("").join(person.hobbies.map(function(h) {
  return h.substring(0, 1);
})) === null ? 0 : person.name.toLowerCase().split("").join(person.hobbies.map(function(h) {
  return h.substring(0, 1);
})).length);
console.log("\\n========== METHOD CHAINS WITH MATH FUNCTIONS ==========");
console.log("\\n16. Math functions in chains:");
console.log(numbers.map(function(n) {
  return Math.min(100, Math.pow(n, 2), Math.round(n * 5.5));
}));
console.log("\\n17. JSON stringify/parse method chain:");
console.log(Object.keys(JSON.parse(JSON.stringify(person))).map(function(key) {
  return key.toUpperCase();
}));
console.log("\\n========== NESTED METHOD CALLS WITH CONDITIONALS ==========");
console.log("\\n18. Conditional method selection:");
console.log(numbers.map(function(n) {
  return n < 5 ? n.toString(2) : n.toString(16);
}));
console.log("\\n19. Mixed array and string methods:");
console.log(words.map(function(word) {
  return (word === null ? 0 : word.length) < 6 ? word.repeat(2) : word.substring(0, 5);
}));
console.log("\\n========== END OF EXAMPLES ==========");
//# sourceMappingURL=data:application/json;base64,
