var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/js-nested/deep-js.js
function deepJsFunction(x) {
  return (x + 15) * 2;
}

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/nested/nested-hql.ts
function nestedHqlFunction(x) {
  let deepResult = deepJsFunction(x);
  let arr = [1, 2, 3, 4, 5];
  return deepResult + (() => {
    try {
      const result = arr[2];
      return result !== void 0 ? result : arr(2);
    } catch (_) {
      return arr(2);
    }
  })();
}

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/hql-module.ts
function hqlFunction(x) {
  let nestedResult = nestedHqlFunction(x * 2);
  return nestedResult + 5;
}

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/ts-module.ts
var ts_module_exports = {};
__export(ts_module_exports, {
  default: () => ts_module_default,
  tsConstant: () => tsConstant,
  tsFunction: () => tsFunction
});
function tsFunction(x) {
  return x * 10;
}
var tsConstant = "TypeScript Module";
var ts_module_default = {
  tsFunction,
  multiplyBy: (x, y) => x * y,
  tsConstant
};

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/ts-js-bridge.js
var tsModule = function() {
  const wrapper = ts_module_default !== void 0 ? ts_module_default : {};
  for (const [key, value] of Object.entries(ts_module_exports)) {
    if (key !== "default")
      wrapper[key] = value;
  }
  return wrapper;
}();
function tsJsFunction(x) {
  return tsModule.multiplyBy(x, 3);
}

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/js-helper
function helperFunction(x) {
  return x * 5;
}

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/js-module.js
function jsFunction(x) {
  const tsResult = tsJsFunction(x * 3);
  const helperResult = helperFunction(x);
  return tsResult + helperResult;
}

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/circular/b.ts
function incrementCircular(value) {
  return value + circularValue;
}

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/circular/a.ts
var circularValue = 10;
function circularFunction() {
  return incrementCircular(circularValue);
}

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/entry.ts
var moduleTs = function() {
  const wrapper = ts_module_default !== void 0 ? ts_module_default : {};
  for (const [key, value] of Object.entries(ts_module_exports)) {
    if (key !== "default")
      wrapper[key] = value;
  }
  return wrapper;
}();
function extremeFunction() {
  let hqlResult = hqlFunction(10);
  let jsResult = jsFunction(20);
  let tsResult = moduleTs.tsFunction(30);
  let circResult = circularFunction();
  return hqlResult + jsResult + tsResult + circResult;
}
console.log("HQL result:", hqlFunction(5));
console.log("JS result:", jsFunction(10));
console.log("TS result:", moduleTs.tsFunction(15));
console.log("Circular result:", circularFunction());
console.log("Combined result:", extremeFunction());
export {
  extremeFunction
};
//# sourceMappingURL=data:application/json;base64,
