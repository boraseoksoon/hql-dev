var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// doc/examples/test-complex-imports/extreme-test/ts-module.ts
var ts_module_exports = {};
__export(ts_module_exports, {
  default: () => ts_module_default,
  tsFunction: () => tsFunction,
  tsUsingHqlFunction: () => tsUsingHqlFunction
});
function tsFunction(x) {
  return x + 15;
}
function tsUsingHqlFunction(x) {
  return x * 2 + 5;
}
var ts_module_default = {
  tsFunction,
  tsUsingHqlFunction,
  multiplyBy: (x, y) => x * y
};

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/circular/b.ts
function incrementCircular(x) {
  return myFunction(x) + 1;
}
console.log("Direct result from b.hql:", myFunction(20));

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/circular/a.ts
function myFunction(x) {
  return x + 10;
}
function getValueFromFunction(x) {
  return myFunction(x);
}
console.log("Result of function call:", getValueFromFunction(5));
console.log("Result of circular import function:", incrementCircular(10));
var myCollection = ["a", "b", "c"];
console.log("Element from collection:", (() => {
  try {
    const result = myCollection[1];
    return result !== void 0 ? result : myCollection(1);
  } catch (_) {
    return myCollection(1);
  }
})());

// doc/examples/test-complex-imports/extreme-test/js-helper.js
function helperFunction(x) {
  return x * 5;
}

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/entry-simpler.ts
var moduleTs = function() {
  const wrapper = ts_module_default !== void 0 ? ts_module_default : {};
  for (const [key, value] of Object.entries(ts_module_exports)) {
    if (key !== "default")
      wrapper[key] = value;
  }
  return wrapper;
}();
function hqlFunction(x) {
  return x * 2 + 5;
}
function jsFunction(x) {
  return x * 3 + helperFunction(x);
}
function extremeFunction() {
  let hqlResult = hqlFunction(10);
  let jsResult = jsFunction(20);
  let tsResult = moduleTs.tsFunction(30);
  let circResult = myFunction();
  return hqlResult + jsResult + tsResult + circResult;
}
console.log("HQL result:", hqlFunction(5));
console.log("JS result:", jsFunction(10));
console.log("TS result:", moduleTs.tsFunction(15));
console.log("Circular result:", myFunction());
console.log("Combined result:", extremeFunction());
export {
  extremeFunction
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidHMtbW9kdWxlLnRzIiwgIi4uLy4uLy4uLy4uLy5ocWwtY2FjaGUvMS9kb2MvZXhhbXBsZXMvdGVzdC1jb21wbGV4LWltcG9ydHMvZXh0cmVtZS10ZXN0L2NpcmN1bGFyL2IudHMiLCAiLi4vLi4vLi4vLi4vLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy90ZXN0LWNvbXBsZXgtaW1wb3J0cy9leHRyZW1lLXRlc3QvY2lyY3VsYXIvYS50cyIsICJqcy1oZWxwZXIuanMiLCAiLi4vLi4vLi4vLi4vLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy90ZXN0LWNvbXBsZXgtaW1wb3J0cy9leHRyZW1lLXRlc3QvZW50cnktc2ltcGxlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gVHlwZVNjcmlwdCBtb2R1bGVcbi8vIERlbW9uc3RyYXRlcyBUUyBpbnRlZ3JhdGlvbiB3aXRoIEhRTFxuXG4vLyBEZWZpbmUgYSBmdW5jdGlvbiB3aXRoIFR5cGVTY3JpcHQgdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiB0c0Z1bmN0aW9uKHg6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiB4ICsgMTU7XG59XG5cbi8vIFRoaXMgaXMgYSBzdHViIHRoYXQgd291bGQgbm9ybWFsbHkgdXNlIGhxbEZ1bmN0aW9uXG5leHBvcnQgZnVuY3Rpb24gdHNVc2luZ0hxbEZ1bmN0aW9uKHg6IG51bWJlcik6IG51bWJlciB7XG4gIC8vIFdlIHdvdWxkIG5vcm1hbGx5IGltcG9ydCBhbmQgdXNlIGhxbEZ1bmN0aW9uIGhlcmUsXG4gIC8vIGJ1dCB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMsIHdlIGltcGxlbWVudCBkaXJlY3RseVxuICByZXR1cm4gKHggKiAyKSArIDU7IC8vIFNhbWUgbG9naWMgYXMgaHFsRnVuY3Rpb24gZm9yIHRlc3Rpbmdcbn1cblxuLy8gRXhwb3J0IGFzIGRlZmF1bHRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgdHNGdW5jdGlvbixcbiAgdHNVc2luZ0hxbEZ1bmN0aW9uLFxuICBtdWx0aXBseUJ5OiAoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIgPT4geCAqIHlcbn07ICIsICJpbXBvcnQgeyBteUZ1bmN0aW9uIH0gZnJvbSBcIi9Vc2Vycy9zZW9rc29vbmphbmcvRGVza3RvcC9ocWwvLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy90ZXN0LWNvbXBsZXgtaW1wb3J0cy9leHRyZW1lLXRlc3QvY2lyY3VsYXIvYS50c1wiO1xuZnVuY3Rpb24gaW5jcmVtZW50Q2lyY3VsYXIoeCkge1xuICAgIHJldHVybiBteUZ1bmN0aW9uKHgpICsgMTtcbn1cbmNvbnNvbGUubG9nKFwiRGlyZWN0IHJlc3VsdCBmcm9tIGIuaHFsOlwiLCBteUZ1bmN0aW9uKDIwKSk7XG5leHBvcnQgeyBpbmNyZW1lbnRDaXJjdWxhciB9O1xuIiwgImltcG9ydCB7IGluY3JlbWVudENpcmN1bGFyIH0gZnJvbSBcImZpbGU6Ly8vVXNlcnMvc2Vva3Nvb25qYW5nL0Rlc2t0b3AvaHFsLy5ocWwtY2FjaGUvMS9kb2MvZXhhbXBsZXMvdGVzdC1jb21wbGV4LWltcG9ydHMvZXh0cmVtZS10ZXN0L2NpcmN1bGFyL2IudHNcIjtcbmZ1bmN0aW9uIG15RnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4ICsgMTA7XG59XG5mdW5jdGlvbiBnZXRWYWx1ZUZyb21GdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIG15RnVuY3Rpb24oeCk7XG59XG5jb25zb2xlLmxvZyhcIlJlc3VsdCBvZiBmdW5jdGlvbiBjYWxsOlwiLCBnZXRWYWx1ZUZyb21GdW5jdGlvbig1KSk7XG5jb25zb2xlLmxvZyhcIlJlc3VsdCBvZiBjaXJjdWxhciBpbXBvcnQgZnVuY3Rpb246XCIsIGluY3JlbWVudENpcmN1bGFyKDEwKSk7XG5sZXQgbXlDb2xsZWN0aW9uID0gW1wiYVwiLCBcImJcIiwgXCJjXCJdO1xuY29uc29sZS5sb2coXCJFbGVtZW50IGZyb20gY29sbGVjdGlvbjpcIiwgKCgpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBteUNvbGxlY3Rpb25bMV07XG4gICAgICAgIHJldHVybiByZXN1bHQgIT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IG15Q29sbGVjdGlvbigxKTtcbiAgICB9XG4gICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgcmV0dXJuIG15Q29sbGVjdGlvbigxKTtcbiAgICB9XG59KSgpKTtcbmV4cG9ydCB7IG15RnVuY3Rpb24gfTtcbiIsICIvLyBKUyBoZWxwZXIgbW9kdWxlXG4vLyBBIHNpbXBsZSBoZWxwZXIgZnVuY3Rpb24gbW9kdWxlXG5cbi8vIERlZmluZSBhIGhlbHBlciBmdW5jdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGhlbHBlckZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggKiA1O1xufSAiLCAiaW1wb3J0ICogYXMgbW9kdWxlVHNNb2R1bGUgZnJvbSBcIi4vdHMtbW9kdWxlLnRzXCI7XG5jb25zdCBtb2R1bGVUcyA9IChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vZHVsZVRzTW9kdWxlLmRlZmF1bHQgIT09IHVuZGVmaW5lZCA/IG1vZHVsZVRzTW9kdWxlLmRlZmF1bHQgOiB7fTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhtb2R1bGVUc01vZHVsZSkpIHtcbiAgICAgICAgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIpXG4gICAgICAgICAgICB3cmFwcGVyW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXBwZXI7XG59KSgpO1xuaW1wb3J0IHsgbXlGdW5jdGlvbiBhcyBjaXJjdWxhckZ1bmN0aW9uIH0gZnJvbSBcIi9Vc2Vycy9zZW9rc29vbmphbmcvRGVza3RvcC9ocWwvLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy90ZXN0LWNvbXBsZXgtaW1wb3J0cy9leHRyZW1lLXRlc3QvY2lyY3VsYXIvYS50c1wiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb24gfSBmcm9tIFwiLi9qcy1oZWxwZXIuanNcIjtcbmZ1bmN0aW9uIGhxbEZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCAqIDIgKyA1O1xufVxuZnVuY3Rpb24ganNGdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggKiAzICsgaGVscGVyRnVuY3Rpb24oeCk7XG59XG5mdW5jdGlvbiBleHRyZW1lRnVuY3Rpb24oKSB7XG4gICAgbGV0IGhxbFJlc3VsdCA9IGhxbEZ1bmN0aW9uKDEwKTtcbiAgICBsZXQganNSZXN1bHQgPSBqc0Z1bmN0aW9uKDIwKTtcbiAgICBsZXQgdHNSZXN1bHQgPSBtb2R1bGVUcy50c0Z1bmN0aW9uKDMwKTtcbiAgICBsZXQgY2lyY1Jlc3VsdCA9IGNpcmN1bGFyRnVuY3Rpb24oKTtcbiAgICByZXR1cm4gaHFsUmVzdWx0ICsganNSZXN1bHQgKyB0c1Jlc3VsdCArIGNpcmNSZXN1bHQ7XG59XG5jb25zb2xlLmxvZyhcIkhRTCByZXN1bHQ6XCIsIGhxbEZ1bmN0aW9uKDUpKTtcbmNvbnNvbGUubG9nKFwiSlMgcmVzdWx0OlwiLCBqc0Z1bmN0aW9uKDEwKSk7XG5jb25zb2xlLmxvZyhcIlRTIHJlc3VsdDpcIiwgbW9kdWxlVHMudHNGdW5jdGlvbigxNSkpO1xuY29uc29sZS5sb2coXCJDaXJjdWxhciByZXN1bHQ6XCIsIGNpcmN1bGFyRnVuY3Rpb24oKSk7XG5jb25zb2xlLmxvZyhcIkNvbWJpbmVkIHJlc3VsdDpcIiwgZXh0cmVtZUZ1bmN0aW9uKCkpO1xuZXhwb3J0IHsgZXh0cmVtZUZ1bmN0aW9uIH07XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSU8sU0FBUyxXQUFXLEdBQW1CO0FBQzVDLFNBQU8sSUFBSTtBQUNiO0FBR08sU0FBUyxtQkFBbUIsR0FBbUI7QUFHcEQsU0FBUSxJQUFJLElBQUs7QUFDbkI7QUFHQSxJQUFPLG9CQUFRO0FBQUEsRUFDYjtBQUFBLEVBQ0E7QUFBQSxFQUNBLFlBQVksQ0FBQyxHQUFXLE1BQXNCLElBQUk7QUFDcEQ7OztBQ25CQSxTQUFTLGtCQUFrQixHQUFHO0FBQzFCLFNBQU8sV0FBVyxDQUFDLElBQUk7QUFDM0I7QUFDQSxRQUFRLElBQUksNkJBQTZCLFdBQVcsRUFBRSxDQUFDOzs7QUNIdkQsU0FBUyxXQUFXLEdBQUc7QUFDbkIsU0FBTyxJQUFJO0FBQ2Y7QUFDQSxTQUFTLHFCQUFxQixHQUFHO0FBQzdCLFNBQU8sV0FBVyxDQUFDO0FBQ3ZCO0FBQ0EsUUFBUSxJQUFJLDRCQUE0QixxQkFBcUIsQ0FBQyxDQUFDO0FBQy9ELFFBQVEsSUFBSSx1Q0FBdUMsa0JBQWtCLEVBQUUsQ0FBQztBQUN4RSxJQUFJLGVBQWUsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUNqQyxRQUFRLElBQUksNkJBQTZCLE1BQU07QUFDM0MsTUFBSTtBQUNBLFVBQU0sU0FBUyxhQUFhLENBQUM7QUFDN0IsV0FBTyxXQUFXLFNBQVksU0FBUyxhQUFhLENBQUM7QUFBQSxFQUN6RCxTQUNPLEdBQVA7QUFDSSxXQUFPLGFBQWEsQ0FBQztBQUFBLEVBQ3pCO0FBQ0osR0FBRyxDQUFDOzs7QUNkRyxTQUFTLGVBQWUsR0FBRztBQUNoQyxTQUFPLElBQUk7QUFDYjs7O0FDTEEsSUFBTSxXQUFZLFdBQVk7QUFDMUIsUUFBTSxVQUF5QixzQkFBWSxTQUEyQixvQkFBVSxDQUFDO0FBQ2pGLGFBQVcsQ0FBQyxLQUFLLEtBQUssS0FBSyxPQUFPLFFBQVEsaUJBQWMsR0FBRztBQUN2RCxRQUFJLFFBQVE7QUFDUixjQUFRLEdBQUcsSUFBSTtBQUFBLEVBQ3ZCO0FBQ0EsU0FBTztBQUNYLEVBQUc7QUFHSCxTQUFTLFlBQVksR0FBRztBQUNwQixTQUFPLElBQUksSUFBSTtBQUNuQjtBQUNBLFNBQVMsV0FBVyxHQUFHO0FBQ25CLFNBQU8sSUFBSSxJQUFJLGVBQWUsQ0FBQztBQUNuQztBQUNBLFNBQVMsa0JBQWtCO0FBQ3ZCLE1BQUksWUFBWSxZQUFZLEVBQUU7QUFDOUIsTUFBSSxXQUFXLFdBQVcsRUFBRTtBQUM1QixNQUFJLFdBQVcsU0FBUyxXQUFXLEVBQUU7QUFDckMsTUFBSSxhQUFhLFdBQWlCO0FBQ2xDLFNBQU8sWUFBWSxXQUFXLFdBQVc7QUFDN0M7QUFDQSxRQUFRLElBQUksZUFBZSxZQUFZLENBQUMsQ0FBQztBQUN6QyxRQUFRLElBQUksY0FBYyxXQUFXLEVBQUUsQ0FBQztBQUN4QyxRQUFRLElBQUksY0FBYyxTQUFTLFdBQVcsRUFBRSxDQUFDO0FBQ2pELFFBQVEsSUFBSSxvQkFBb0IsV0FBaUIsQ0FBQztBQUNsRCxRQUFRLElBQUksb0JBQW9CLGdCQUFnQixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
