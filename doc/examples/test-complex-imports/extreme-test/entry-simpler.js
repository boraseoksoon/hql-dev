var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/ts-module.ts
var ts_module_exports = {};
__export(ts_module_exports, {
  default: () => ts_module_default,
  tsConstant: () => tsConstant,
  tsFunction: () => tsFunction
});
function tsFunction(x) {
  return x * 10;
}
var tsConstant = "TypeScript Module";
var ts_module_default = {
  tsFunction,
  multiplyBy: (x, y) => x * y,
  tsConstant
};

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/circular/b.ts
function incrementCircular(value) {
  return value + circularValue;
}

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/circular/a.ts
var circularValue = 10;
function circularFunction() {
  return incrementCircular(circularValue);
}
function myFunction() {
  return circularFunction();
}

// doc/examples/test-complex-imports/extreme-test/js-helper.js
function helperFunction(x) {
  return x * 5;
}

// .hql-cache/1/doc/examples/test-complex-imports/extreme-test/entry-simpler.ts
var moduleTs = function() {
  const wrapper = ts_module_default !== void 0 ? ts_module_default : {};
  for (const [key, value] of Object.entries(ts_module_exports)) {
    if (key !== "default")
      wrapper[key] = value;
  }
  return wrapper;
}();
function hqlFunction(x) {
  return x * 2 + 5;
}
function jsFunction(x) {
  return x * 3 + helperFunction(x);
}
function extremeFunction() {
  let hqlResult = hqlFunction(10);
  let jsResult = jsFunction(20);
  let tsResult = moduleTs.tsFunction(30);
  let circResult = myFunction();
  return hqlResult + jsResult + tsResult + circResult;
}
console.log("HQL result:", hqlFunction(5));
console.log("JS result:", jsFunction(10));
console.log("TS result:", moduleTs.tsFunction(15));
console.log("Circular result:", myFunction());
console.log("Combined result:", extremeFunction());
export {
  extremeFunction
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy90ZXN0LWNvbXBsZXgtaW1wb3J0cy9leHRyZW1lLXRlc3QvdHMtbW9kdWxlLnRzIiwgIi4uLy4uLy4uLy4uLy5ocWwtY2FjaGUvMS9kb2MvZXhhbXBsZXMvdGVzdC1jb21wbGV4LWltcG9ydHMvZXh0cmVtZS10ZXN0L2NpcmN1bGFyL2IudHMiLCAiLi4vLi4vLi4vLi4vLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy90ZXN0LWNvbXBsZXgtaW1wb3J0cy9leHRyZW1lLXRlc3QvY2lyY3VsYXIvYS50cyIsICJqcy1oZWxwZXIuanMiLCAiLi4vLi4vLi4vLi4vLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy90ZXN0LWNvbXBsZXgtaW1wb3J0cy9leHRyZW1lLXRlc3QvZW50cnktc2ltcGxlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gdHMtbW9kdWxlLnRzIC0gVHlwZVNjcmlwdCBtb2R1bGUgZm9yIGV4dHJlbWUgdGVzdFxuXG5leHBvcnQgZnVuY3Rpb24gdHNGdW5jdGlvbih4OiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4geCAqIDEwO1xufVxuXG5leHBvcnQgY29uc3QgdHNDb25zdGFudCA9IFwiVHlwZVNjcmlwdCBNb2R1bGVcIjtcblxuLy8gUHJvdmlkZSBhIGRlZmF1bHQgZXhwb3J0IHRvIHN1cHBvcnQgbmFtZXNwYWNlLXN0eWxlIGRlZmF1bHQgaW1wb3J0c1xuZXhwb3J0IGRlZmF1bHQge1xuICB0c0Z1bmN0aW9uLFxuICBtdWx0aXBseUJ5OiAoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIgPT4geCAqIHksXG4gIHRzQ29uc3RhbnQsXG59O1xuIiwgImltcG9ydCB7IGNpcmN1bGFyVmFsdWUgfSBmcm9tIFwiL1VzZXJzL3Nlb2tzb29uamFuZy9EZXNrdG9wL2hxbC8uaHFsLWNhY2hlLzEvZG9jL2V4YW1wbGVzL3Rlc3QtY29tcGxleC1pbXBvcnRzL2V4dHJlbWUtdGVzdC9jaXJjdWxhci9hLnRzXCI7XG5mdW5jdGlvbiBpbmNyZW1lbnRDaXJjdWxhcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSArIGNpcmN1bGFyVmFsdWU7XG59XG5leHBvcnQgeyBpbmNyZW1lbnRDaXJjdWxhciB9O1xuIiwgImxldCBjaXJjdWxhclZhbHVlID0gMTA7XG5pbXBvcnQgeyBpbmNyZW1lbnRDaXJjdWxhciB9IGZyb20gXCIvVXNlcnMvc2Vva3Nvb25qYW5nL0Rlc2t0b3AvaHFsLy5ocWwtY2FjaGUvMS9kb2MvZXhhbXBsZXMvdGVzdC1jb21wbGV4LWltcG9ydHMvZXh0cmVtZS10ZXN0L2NpcmN1bGFyL2IudHNcIjtcbmZ1bmN0aW9uIGNpcmN1bGFyRnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGluY3JlbWVudENpcmN1bGFyKGNpcmN1bGFyVmFsdWUpO1xufVxuZnVuY3Rpb24gbXlGdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY2lyY3VsYXJGdW5jdGlvbigpO1xufVxuZXhwb3J0IHsgY2lyY3VsYXJWYWx1ZSB9O1xuZXhwb3J0IHsgY2lyY3VsYXJGdW5jdGlvbiB9O1xuZXhwb3J0IHsgbXlGdW5jdGlvbiB9O1xuIiwgIi8vIEpTIGhlbHBlciBtb2R1bGVcbi8vIEEgc2ltcGxlIGhlbHBlciBmdW5jdGlvbiBtb2R1bGVcblxuLy8gRGVmaW5lIGEgaGVscGVyIGZ1bmN0aW9uXG5leHBvcnQgZnVuY3Rpb24gaGVscGVyRnVuY3Rpb24oeCkge1xuICByZXR1cm4geCAqIDU7XG59ICIsICJpbXBvcnQgKiBhcyBtb2R1bGVUc01vZHVsZSBmcm9tIFwiLi90cy1tb2R1bGUudHNcIjtcbmNvbnN0IG1vZHVsZVRzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB3cmFwcGVyID0gbW9kdWxlVHNNb2R1bGUuZGVmYXVsdCAhPT0gdW5kZWZpbmVkID8gbW9kdWxlVHNNb2R1bGUuZGVmYXVsdCA6IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG1vZHVsZVRzTW9kdWxlKSkge1xuICAgICAgICBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIilcbiAgICAgICAgICAgIHdyYXBwZXJba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcHBlcjtcbn0pKCk7XG5pbXBvcnQgeyBteUZ1bmN0aW9uIGFzIGNpcmN1bGFyRnVuY3Rpb24gfSBmcm9tIFwiL1VzZXJzL3Nlb2tzb29uamFuZy9EZXNrdG9wL2hxbC8uaHFsLWNhY2hlLzEvZG9jL2V4YW1wbGVzL3Rlc3QtY29tcGxleC1pbXBvcnRzL2V4dHJlbWUtdGVzdC9jaXJjdWxhci9hLnRzXCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbiB9IGZyb20gXCIuL2pzLWhlbHBlci5qc1wiO1xuZnVuY3Rpb24gaHFsRnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4ICogMiArIDU7XG59XG5mdW5jdGlvbiBqc0Z1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCAqIDMgKyBoZWxwZXJGdW5jdGlvbih4KTtcbn1cbmZ1bmN0aW9uIGV4dHJlbWVGdW5jdGlvbigpIHtcbiAgICBsZXQgaHFsUmVzdWx0ID0gaHFsRnVuY3Rpb24oMTApO1xuICAgIGxldCBqc1Jlc3VsdCA9IGpzRnVuY3Rpb24oMjApO1xuICAgIGxldCB0c1Jlc3VsdCA9IG1vZHVsZVRzLnRzRnVuY3Rpb24oMzApO1xuICAgIGxldCBjaXJjUmVzdWx0ID0gY2lyY3VsYXJGdW5jdGlvbigpO1xuICAgIHJldHVybiBocWxSZXN1bHQgKyBqc1Jlc3VsdCArIHRzUmVzdWx0ICsgY2lyY1Jlc3VsdDtcbn1cbmNvbnNvbGUubG9nKFwiSFFMIHJlc3VsdDpcIiwgaHFsRnVuY3Rpb24oNSkpO1xuY29uc29sZS5sb2coXCJKUyByZXN1bHQ6XCIsIGpzRnVuY3Rpb24oMTApKTtcbmNvbnNvbGUubG9nKFwiVFMgcmVzdWx0OlwiLCBtb2R1bGVUcy50c0Z1bmN0aW9uKDE1KSk7XG5jb25zb2xlLmxvZyhcIkNpcmN1bGFyIHJlc3VsdDpcIiwgY2lyY3VsYXJGdW5jdGlvbigpKTtcbmNvbnNvbGUubG9nKFwiQ29tYmluZWQgcmVzdWx0OlwiLCBleHRyZW1lRnVuY3Rpb24oKSk7XG5leHBvcnQgeyBleHRyZW1lRnVuY3Rpb24gfTtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFTyxTQUFTLFdBQVcsR0FBbUI7QUFDNUMsU0FBTyxJQUFJO0FBQ2I7QUFFTyxJQUFNLGFBQWE7QUFHMUIsSUFBTyxvQkFBUTtBQUFBLEVBQ2I7QUFBQSxFQUNBLFlBQVksQ0FBQyxHQUFXLE1BQXNCLElBQUk7QUFBQSxFQUNsRDtBQUNGOzs7QUNaQSxTQUFTLGtCQUFrQixPQUFPO0FBQzlCLFNBQU8sUUFBUTtBQUNuQjs7O0FDSEEsSUFBSSxnQkFBZ0I7QUFFcEIsU0FBUyxtQkFBbUI7QUFDeEIsU0FBTyxrQkFBa0IsYUFBYTtBQUMxQztBQUNBLFNBQVMsYUFBYTtBQUNsQixTQUFPLGlCQUFpQjtBQUM1Qjs7O0FDSE8sU0FBUyxlQUFlLEdBQUc7QUFDaEMsU0FBTyxJQUFJO0FBQ2I7OztBQ0xBLElBQU0sV0FBWSxXQUFZO0FBQzFCLFFBQU0sVUFBeUIsc0JBQVksU0FBMkIsb0JBQVUsQ0FBQztBQUNqRixhQUFXLENBQUMsS0FBSyxLQUFLLEtBQUssT0FBTyxRQUFRLGlCQUFjLEdBQUc7QUFDdkQsUUFBSSxRQUFRO0FBQ1IsY0FBUSxHQUFHLElBQUk7QUFBQSxFQUN2QjtBQUNBLFNBQU87QUFDWCxFQUFHO0FBR0gsU0FBUyxZQUFZLEdBQUc7QUFDcEIsU0FBTyxJQUFJLElBQUk7QUFDbkI7QUFDQSxTQUFTLFdBQVcsR0FBRztBQUNuQixTQUFPLElBQUksSUFBSSxlQUFlLENBQUM7QUFDbkM7QUFDQSxTQUFTLGtCQUFrQjtBQUN2QixNQUFJLFlBQVksWUFBWSxFQUFFO0FBQzlCLE1BQUksV0FBVyxXQUFXLEVBQUU7QUFDNUIsTUFBSSxXQUFXLFNBQVMsV0FBVyxFQUFFO0FBQ3JDLE1BQUksYUFBYSxXQUFpQjtBQUNsQyxTQUFPLFlBQVksV0FBVyxXQUFXO0FBQzdDO0FBQ0EsUUFBUSxJQUFJLGVBQWUsWUFBWSxDQUFDLENBQUM7QUFDekMsUUFBUSxJQUFJLGNBQWMsV0FBVyxFQUFFLENBQUM7QUFDeEMsUUFBUSxJQUFJLGNBQWMsU0FBUyxXQUFXLEVBQUUsQ0FBQztBQUNqRCxRQUFRLElBQUksb0JBQW9CLFdBQWlCLENBQUM7QUFDbEQsUUFBUSxJQUFJLG9CQUFvQixnQkFBZ0IsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
