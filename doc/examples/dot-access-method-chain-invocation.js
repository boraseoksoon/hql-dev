// .hql-cache/1/doc/examples/dot-access-method-chain-invocation.ts
var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var words = ["apple", "banana", "cherry", "date", "elderberry", "fig", "grape"];
var text = "   The quick brown fox jumps over the lazy dog   ";
var person = {
  name: "John",
  age: 30,
  hobbies: ["coding", "reading", "hiking"]
};
console.log("========== DOT CHAIN SYNTAX EXAMPLES ==========");
console.log("\\n1. Double all even numbers (dot chain):");
console.log(numbers.filter(function(n) {
  return n % 2 === 0;
}).map(function(n) {
  return n * 2;
}));
console.log("\\n2. Triple chain with dot syntax:");
console.log(numbers.filter(function(n) {
  return n > 5;
}).map(function(n) {
  return n * 2;
}).sort(function(a, b) {
  return b - a;
}));
console.log("\\n3. Four-operation chain with dot syntax:");
console.log(numbers.filter(function(n) {
  return n > 3;
}).map(function(n) {
  return n * 10;
}).sort(function(a, b) {
  return a - b;
}).join(", "));
console.log("\\n4. String operations with dot syntax:");
console.log((() => {
  const _obj = (() => {
    const _obj2 = text;
    const _prop2 = _obj2.trim;
    return typeof _prop2 === "function" ? _prop2.call(_obj2) : _prop2;
  })();
  const _prop = _obj.toUpperCase;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})().split(" "));
console.log("\\n5. Complex string transformations:");
console.log((() => {
  const _obj = (() => {
    const _obj2 = text;
    const _prop2 = _obj2.trim;
    return typeof _prop2 === "function" ? _prop2.call(_obj2) : _prop2;
  })();
  const _prop = _obj.toLowerCase;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})().split(" ").filter(function(word) {
  return (word === null ? 0 : word.length) > 3;
}).join("-"));
console.log("\\n6. Array reduce with dot syntax:");
console.log(numbers.filter(function(n) {
  return n > 5;
}).map(function(n) {
  return n * 2;
}).reduce(function(acc, curr) {
  return acc + curr;
}, 0));
console.log("\\n7. Object property manipulation:");
console.log(person.hobbies.filter(function(hobby) {
  return (hobby === null ? 0 : hobby.length) > 5;
}).map(function(h) {
  return h.toUpperCase();
}).join(" & "));
console.log((() => {
  const _obj = person;
  const _prop = _obj.hobbies;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})().filter(function(hobby) {
  return (hobby === null ? 0 : hobby.length) > 5;
}).map(function(h) {
  return h.toUpperCase();
}).join(" & "));
console.log("\\n8. Math operations in dot chain:");
console.log(numbers.map(function(n) {
  return Math.min(100, Math.pow(n, 2), Math.round(n * 5.5));
}));
console.log("\\n9. Mixed string and array operations:");
console.log(words.map(function(word) {
  return (word === null ? 0 : word.length) < 6 ? word.repeat(2) : word.substring(0, 5);
}).join(" | "));
console.log("\\n10. Nested dot chains:");
console.log(numbers.filter(function(n) {
  return n % 3 === 0;
}).map(function(n) {
  return n * numbers.filter(function(x) {
    return x < n;
  }).reduce(function(acc, curr) {
    return acc + curr;
  }, 0);
}));
console.log("\\n========== END OF DOT CHAIN EXAMPLES ==========");
//# sourceMappingURL=data:application/json;base64,
