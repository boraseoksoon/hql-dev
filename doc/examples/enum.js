// .hql-cache/1/doc/examples/enum.ts
var Direction = Object.freeze({
  north: "north",
  south: "south",
  east: "east",
  west: "west"
});
var heading = Direction.north;
heading === Direction.west ? console.log("Heading west!") : console.log("Not heading west");
heading === Direction.north ? console.log("Going north") : heading === Direction.south ? console.log("Going south") : heading === Direction.east ? console.log("Going east") : heading === Direction.west ? console.log("Going west") : null;
var HttpStatus = Object.freeze(
  /* @type {Object<string, Int>} */
  {
    ok: 200,
    created: 201,
    badRequest: 400,
    notFound: 404,
    serverError: 500
  }
);
var statusCode = HttpStatus.notFound;
statusCode >= 400 ? console.log("Error status code") : console.log("Success status code");
var Payment = class {
  constructor(type, values) {
    this.type = type;
    this.values = values;
  }
  is(type) {
    return this.type === type;
  }
  getValue(key) {
    return this.values[key];
  }
  static cash(options = {}) {
    const values = { amount: options.amount };
    return new Payment("cash", values);
  }
  static creditCard(options = {}) {
    const values = { number: options.number, expiry: options.expiry, cvv: options.cvv };
    return new Payment("creditCard", values);
  }
  static check(options = {}) {
    const values = { accountNumber: options.accountNumber, routingNumber: options.routingNumber };
    return new Payment("check", values);
  }
};
var payment1 = Payment.cash({
  amount: 100
});
var payment2 = Payment.creditCard({
  number: "4111-1111-1111-1111",
  expiry: "12/25",
  cvv: "123"
});
payment1.is("cash") ? console.log("Cash payment of ", payment1["values"]["amount"]) : console.log("Not a cash payment");
function processPayment(payment) {
  return payment.is("cash") ? function() {
    const amount = payment["values"]["amount"];
    return console.log("Processing cash payment of $", amount);
  }() : payment.is("creditCard") ? function() {
    const values = payment["values"];
    const cardNum = values["number"];
    const expiry = values["expiry"];
    return console.log("Processing credit card ", cardNum, " expiring ", expiry);
  }() : payment.is("check") ? function() {
    const values = payment["values"];
    return console.log("Processing check from account ", values["accountNumber"]);
  }() : console.log("Unknown payment type");
}
processPayment(payment1);
processPayment(payment2);
var OS = Object.freeze({
  macOS: "macOS",
  iOS: "iOS",
  linux: "linux"
});
var StatusCode = Object.freeze(
  /* @type {Object<string, Int>} */
  {
    ok: 200,
    notFound: 404,
    serverError: 500
  }
);
function install(os) {
  return os === OS.macOS ? "Installing on macOS" : os === OS.iOS ? "Installing on iOS" : os === OS.linux ? "Installing on Linux" : "Unsupported OS";
}
function install2(os) {
  return os === OS.macOS ? "Installing on macOS" : os === OS.iOS ? "Installing on iOS" : os === OS.linux ? "Installing on Linux" : "Unsupported OS";
}
function check_status(code) {
  return code === HttpStatus.ok ? "Everything is ok!" : code === HttpStatus.notFound ? "Not found!" : "Server error!";
}
var mac_result = install(OS.macOS);
var ios_result = install(OS.iOS);
var linux_result = install(OS.linux);
var mac_result2 = install(OS.macOS);
var status = check_status(HttpStatus.ok);
var error_status = check_status(HttpStatus.serverError);
var mac_result3 = install2(OS.macOS);
console.log(status);
console.log(mac_result3);
var Direction2 = Object.freeze({
  north: "north",
  south: "south",
  east: "east",
  west: "west"
});
var x = 10;
console.log("Value is", x);
console.log("yo Value is", x);
console.log("Value is", x);
//# sourceMappingURL=data:application/json;base64,
