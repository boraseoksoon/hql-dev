var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// .hql-cache/1/doc/examples/dependency-test/macro-b.ts
var macro_b_exports = {};
__export(macro_b_exports, {
  js_double: () => js_double,
  js_minus: () => js_minus
});

// .hql-cache/1/doc/examples/dependency-test/utils.js
var utils_exports = {};
__export(utils_exports, {
  double: () => double,
  hello: () => hello,
  minus: () => minus
});

// .hql-cache/1/doc/examples/dependency-test/macro-c.js
function minus_one(x) {
  return x - 1;
}
function minusguys(x) {
  return minus_one(x);
}

// .hql-cache/1/doc/examples/dependency-test/utils2
import chalk from "jsr:@nothing628/chalk@1.0.0";
function say(message) {
  chalk.green(message);
}

// .hql-cache/1/doc/examples/dependency-test/utils.js
function double(x) {
  return x * 2;
}
function minus(x) {
  return minusguys(x);
}
function hello(msg) {
  console.log(say(msg));
}

// .hql-cache/1/doc/examples/dependency-test/macro-b.ts
var utils = function() {
  const wrapper = void 0 !== void 0 ? void 0 : {};
  for (const [key, value] of Object.entries(utils_exports)) {
    if (key !== "default")
      wrapper[key] = value;
  }
  return wrapper;
}();
var js_double = utils.double(10);
var js_minus = utils.minus(10);

// .hql-cache/1/doc/examples/dependency-test/macro-b2.ts
var utils2 = function() {
  const wrapper = void 0 !== void 0 ? void 0 : {};
  for (const [key, value] of Object.entries(utils_exports)) {
    if (key !== "default")
      wrapper[key] = value;
  }
  return wrapper;
}();
var js_double2 = utils2.double(10);
var js_minus2 = utils2.minus(10);

// .hql-cache/1/doc/examples/dependency-test/macro-a.ts
var macroB = function() {
  const wrapper = void 0 !== void 0 ? void 0 : {};
  for (const [key, value] of Object.entries(macro_b_exports)) {
    if (key !== "default")
      wrapper[key] = value;
  }
  return wrapper;
}();
console.log("macroB : ", macroB);
console.log("macroB.js_minus : ", macroB.js_minus);
console.log("macroB.js_double : ", macroB.js_double);
console.log("js_minus : ", js_minus2);
console.log("js_double : ", js_double2);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy9kZXBlbmRlbmN5LXRlc3QvbWFjcm8tYi50cyIsICIuLi8uLi8uLi8uaHFsLWNhY2hlLzEvZG9jL2V4YW1wbGVzL2RlcGVuZGVuY3ktdGVzdC91dGlscy5qcyIsICIuLi8uLi8uLi8uaHFsLWNhY2hlLzEvZG9jL2V4YW1wbGVzL2RlcGVuZGVuY3ktdGVzdC9tYWNyby1jLmpzIiwgIi4uLy4uLy4uLy5ocWwtY2FjaGUvMS9kb2MvZXhhbXBsZXMvZGVwZW5kZW5jeS10ZXN0L3V0aWxzMiIsICIuLi8uLi8uLi8uaHFsLWNhY2hlLzEvZG9jL2V4YW1wbGVzL2RlcGVuZGVuY3ktdGVzdC9tYWNyby1iMi50cyIsICIuLi8uLi8uLi8uaHFsLWNhY2hlLzEvZG9jL2V4YW1wbGVzL2RlcGVuZGVuY3ktdGVzdC9tYWNyby1hLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgKiBhcyB1dGlsc01vZHVsZSBmcm9tIFwiL1VzZXJzL3Nlb2tzb29uamFuZy9EZXNrdG9wL2hxbC8uaHFsLWNhY2hlLzEvZG9jL2V4YW1wbGVzL2RlcGVuZGVuY3ktdGVzdC91dGlscy5qc1wiO1xuY29uc3QgdXRpbHMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHdyYXBwZXIgPSB1dGlsc01vZHVsZS5kZWZhdWx0ICE9PSB1bmRlZmluZWQgPyB1dGlsc01vZHVsZS5kZWZhdWx0IDoge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModXRpbHNNb2R1bGUpKSB7XG4gICAgICAgIGlmIChrZXkgIT09IFwiZGVmYXVsdFwiKVxuICAgICAgICAgICAgd3JhcHBlcltrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB3cmFwcGVyO1xufSkoKTtcbmNvbnN0IGpzX2RvdWJsZSA9IHV0aWxzLmRvdWJsZSgxMCk7XG5jb25zdCBqc19taW51cyA9IHV0aWxzLm1pbnVzKDEwKTtcbmV4cG9ydCB7IGpzX21pbnVzIH07XG5leHBvcnQgeyBqc19kb3VibGUgfTtcbiIsICJpbXBvcnQgeyBtaW51c2d1eXMgfSBmcm9tIFwiL1VzZXJzL3Nlb2tzb29uamFuZy9EZXNrdG9wL2hxbC8uaHFsLWNhY2hlLzEvZG9jL2V4YW1wbGVzL2RlcGVuZGVuY3ktdGVzdC9tYWNyby1jLmpzXCI7XG5pbXBvcnQgeyBzYXkgfSBmcm9tIFwiL1VzZXJzL3Nlb2tzb29uamFuZy9EZXNrdG9wL2hxbC8uaHFsLWNhY2hlLzEvZG9jL2V4YW1wbGVzL2RlcGVuZGVuY3ktdGVzdC91dGlsczJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGRvdWJsZSh4KSB7XG4gIHJldHVybiB4ICogMjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbnVzKHgpIHtcbiAgcmV0dXJuIG1pbnVzZ3V5cyh4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhlbGxvKG1zZykge1xuICBjb25zb2xlLmxvZyhzYXkobXNnKSk7XG59XG4iLCAiZnVuY3Rpb24gbWludXNfb25lKHgpIHtcbiAgcmV0dXJuIHggLSAxO1xufVxuZnVuY3Rpb24gbWludXNndXlzKHgpIHtcbiAgcmV0dXJuIG1pbnVzX29uZSh4KTtcbn1cbmV4cG9ydCB7XG4gIG1pbnVzZ3V5c1xufTtcbiIsICJpbXBvcnQgY2hhbGsgZnJvbSBcImpzcjpAbm90aGluZzYyOC9jaGFsa0AxLjAuMFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2F5KG1lc3NhZ2UpIHtcbiAgY2hhbGsuZ3JlZW4obWVzc2FnZSk7XG59XG4iLCAiaW1wb3J0ICogYXMgdXRpbHNNb2R1bGUgZnJvbSBcIi9Vc2Vycy9zZW9rc29vbmphbmcvRGVza3RvcC9ocWwvLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy9kZXBlbmRlbmN5LXRlc3QvdXRpbHMuanNcIjtcbmNvbnN0IHV0aWxzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB3cmFwcGVyID0gdXRpbHNNb2R1bGUuZGVmYXVsdCAhPT0gdW5kZWZpbmVkID8gdXRpbHNNb2R1bGUuZGVmYXVsdCA6IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHV0aWxzTW9kdWxlKSkge1xuICAgICAgICBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIilcbiAgICAgICAgICAgIHdyYXBwZXJba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcHBlcjtcbn0pKCk7XG5jb25zdCBqc19kb3VibGUgPSB1dGlscy5kb3VibGUoMTApO1xuY29uc3QganNfbWludXMgPSB1dGlscy5taW51cygxMCk7XG5leHBvcnQgeyBqc19taW51cywganNfZG91YmxlIH07XG4iLCAiaW1wb3J0ICogYXMgbWFjcm9CTW9kdWxlIGZyb20gXCIvVXNlcnMvc2Vva3Nvb25qYW5nL0Rlc2t0b3AvaHFsLy5ocWwtY2FjaGUvMS9kb2MvZXhhbXBsZXMvZGVwZW5kZW5jeS10ZXN0L21hY3JvLWIudHNcIjtcbmNvbnN0IG1hY3JvQiA9IChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1hY3JvQk1vZHVsZS5kZWZhdWx0ICE9PSB1bmRlZmluZWQgPyBtYWNyb0JNb2R1bGUuZGVmYXVsdCA6IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG1hY3JvQk1vZHVsZSkpIHtcbiAgICAgICAgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIpXG4gICAgICAgICAgICB3cmFwcGVyW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXBwZXI7XG59KSgpO1xuY29uc29sZS5sb2coXCJtYWNyb0IgOiBcIiwgbWFjcm9CKTtcbmNvbnNvbGUubG9nKFwibWFjcm9CLmpzX21pbnVzIDogXCIsIG1hY3JvQi5qc19taW51cyk7XG5jb25zb2xlLmxvZyhcIm1hY3JvQi5qc19kb3VibGUgOiBcIiwgbWFjcm9CLmpzX2RvdWJsZSk7XG5pbXBvcnQgeyBqc19taW51cywganNfZG91YmxlIH0gZnJvbSBcIi9Vc2Vycy9zZW9rc29vbmphbmcvRGVza3RvcC9ocWwvLmhxbC1jYWNoZS8xL2RvYy9leGFtcGxlcy9kZXBlbmRlbmN5LXRlc3QvbWFjcm8tYjIudHNcIjtcbmNvbnNvbGUubG9nKFwianNfbWludXMgOiBcIiwganNfbWludXMpO1xuY29uc29sZS5sb2coXCJqc19kb3VibGUgOiBcIiwganNfZG91YmxlKTtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUNBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQ0FBLFNBQVMsVUFBVSxHQUFHO0FBQ3BCLFNBQU8sSUFBSTtBQUNiO0FBQ0EsU0FBUyxVQUFVLEdBQUc7QUFDcEIsU0FBTyxVQUFVLENBQUM7QUFDcEI7OztBQ0xBLE9BQU8sV0FBVztBQUVYLFNBQVMsSUFBSSxTQUFTO0FBQzNCLFFBQU0sTUFBTSxPQUFPO0FBQ3JCOzs7QUZETyxTQUFTLE9BQU8sR0FBRztBQUN4QixTQUFPLElBQUk7QUFDYjtBQUVPLFNBQVMsTUFBTSxHQUFHO0FBQ3ZCLFNBQU8sVUFBVSxDQUFDO0FBQ3BCO0FBRU8sU0FBUyxNQUFNLEtBQUs7QUFDekIsVUFBUSxJQUFJLElBQUksR0FBRyxDQUFDO0FBQ3RCOzs7QURaQSxJQUFNLFFBQVMsV0FBWTtBQUN2QixRQUFNLFVBQXNCLFdBQVksU0FBd0IsU0FBVSxDQUFDO0FBQzNFLGFBQVcsQ0FBQyxLQUFLLEtBQUssS0FBSyxPQUFPLFFBQVEsYUFBVyxHQUFHO0FBQ3BELFFBQUksUUFBUTtBQUNSLGNBQVEsR0FBRyxJQUFJO0FBQUEsRUFDdkI7QUFDQSxTQUFPO0FBQ1gsRUFBRztBQUNILElBQU0sWUFBWSxNQUFNLE9BQU8sRUFBRTtBQUNqQyxJQUFNLFdBQVcsTUFBTSxNQUFNLEVBQUU7OztBSVQvQixJQUFNQSxTQUFTLFdBQVk7QUFDdkIsUUFBTSxVQUFzQixXQUFZLFNBQXdCLFNBQVUsQ0FBQztBQUMzRSxhQUFXLENBQUMsS0FBSyxLQUFLLEtBQUssT0FBTyxRQUFRLGFBQVcsR0FBRztBQUNwRCxRQUFJLFFBQVE7QUFDUixjQUFRLEdBQUcsSUFBSTtBQUFBLEVBQ3ZCO0FBQ0EsU0FBTztBQUNYLEVBQUc7QUFDSCxJQUFNQyxhQUFZRCxPQUFNLE9BQU8sRUFBRTtBQUNqQyxJQUFNRSxZQUFXRixPQUFNLE1BQU0sRUFBRTs7O0FDVC9CLElBQU0sU0FBVSxXQUFZO0FBQ3hCLFFBQU0sVUFBdUIsV0FBWSxTQUF5QixTQUFVLENBQUM7QUFDN0UsYUFBVyxDQUFDLEtBQUssS0FBSyxLQUFLLE9BQU8sUUFBUSxlQUFZLEdBQUc7QUFDckQsUUFBSSxRQUFRO0FBQ1IsY0FBUSxHQUFHLElBQUk7QUFBQSxFQUN2QjtBQUNBLFNBQU87QUFDWCxFQUFHO0FBQ0gsUUFBUSxJQUFJLGFBQWEsTUFBTTtBQUMvQixRQUFRLElBQUksc0JBQXNCLE9BQU8sUUFBUTtBQUNqRCxRQUFRLElBQUksdUJBQXVCLE9BQU8sU0FBUztBQUVuRCxRQUFRLElBQUksZUFBZUcsU0FBUTtBQUNuQyxRQUFRLElBQUksZ0JBQWdCQyxVQUFTOyIsCiAgIm5hbWVzIjogWyJ1dGlscyIsICJqc19kb3VibGUiLCAianNfbWludXMiLCAianNfbWludXMiLCAianNfZG91YmxlIl0KfQo=
