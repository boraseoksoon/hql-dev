// .hql-cache/1/core/lib/stdlib/js/stdlib.js
var LazySeq = class {
  constructor(producer) {
    this._producer = producer;
    this._realized = [];
    this._exhausted = false;
    this._iterating = false;
  }
  // Get a specific index, realizing values up to that point
  get(index) {
    this._realize(index + 1);
    return index < this._realized.length ? this._realized[index] : null;
  }
  // Convert to array up to a certain size (or all if realized)
  toArray(maxSize = Infinity) {
    if (maxSize === Infinity && this._exhausted) {
      return [...this._realized];
    }
    this._realize(maxSize);
    return this._realized.slice(0, maxSize);
  }
  // Internal method to realize values up to a certain count
  _realize(count) {
    if (this._exhausted || this._realized.length >= count || this._iterating) {
      return;
    }
    this._iterating = true;
    try {
      const iterator = this._producer();
      while (this._realized.length < count && !this._exhausted) {
        const { value, done } = iterator.next();
        if (done) {
          this._exhausted = true;
          break;
        }
        this._realized.push(value);
      }
    } finally {
      this._iterating = false;
    }
  }
  // Make the sequence iterable
  [Symbol.iterator]() {
    let index = 0;
    const seq = this;
    return {
      next() {
        const value = seq.get(index);
        if (index < seq._realized.length) {
          index++;
          return { value, done: false };
        }
        return { done: true };
      }
    };
  }
  // Add slice compatibility with normal arrays
  slice(start, end) {
    if (end !== void 0) {
      this._realize(end);
    } else {
      this._realize(start || 0);
    }
    return this._realized.slice(start, end);
  }
};
function _take(n, coll) {
  if (!coll)
    return [];
  if (coll instanceof LazySeq) {
    return coll.toArray(n);
  }
  return coll.slice(0, n);
}
function _map(f, coll) {
  if (!coll)
    return [];
  return coll.map(f);
}
function _filter(pred, coll) {
  if (!coll)
    return [];
  return coll.filter(pred);
}
function _reduce(f, init, coll) {
  if (!coll)
    return init;
  return coll.reduce(f, init);
}
function _groupBy(f, coll) {
  if (!coll)
    return {};
  const result = {};
  for (const item of coll) {
    const key = String(f(item));
    if (!result[key]) {
      result[key] = [];
    }
    result[key].push(item);
  }
  return result;
}
function _keys(obj) {
  if (!obj)
    return [];
  return Object.keys(obj);
}

// .hql-cache/1/core/lib/stdlib/stdlib.ts
function take(n, coll) {
  return _take(n, coll);
}
function map(f, coll) {
  return _map(f, coll);
}
function filter(pred, coll) {
  return _filter(pred, coll);
}
function reduce(f, init, coll) {
  return _reduce(f, init, coll);
}
function groupBy(f, coll) {
  return _groupBy(f, coll);
}
function keys(obj) {
  return _keys(obj);
}

// .hql-cache/1/doc/examples/stdlib_test.ts
var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var users = [{
  name: "Alice",
  age: 28,
  role: "admin"
}, {
  name: "Bob",
  age: 32,
  role: "user"
}, {
  name: "Charlie",
  age: 22,
  role: "user"
}, {
  name: "Diana",
  age: 45,
  role: "admin"
}, {
  name: "Eve",
  age: 19,
  role: "user"
}];
var first_three = take(3, numbers);
console.log("take 3:", first_three);
var doubled = map(function(x) {
  return x * 2;
}, numbers);
console.log("map double:", doubled);
var even_numbers = filter(function(x) {
  return x % 2 === 0;
}, numbers);
console.log("filter even:", even_numbers);
var sum = reduce(function(acc, x) {
  return acc + x;
}, 0, numbers);
console.log("reduce sum:", sum);
var sum_of_doubled_evens = reduce(function(acc, x) {
  return acc + x;
}, 0, map(function(x) {
  return x * 2;
}, filter(function(x) {
  return x % 2 === 0;
}, numbers)));
console.log("sum of doubled evens:", sum_of_doubled_evens);
var grouped_by_role = groupBy(function(user) {
  return user.role;
}, users);
console.log("group by role:");
console.log(grouped_by_role);
var user_keys = keys(users[0]);
console.log("keys of user object:", user_keys);
console.log("\\nTransforming user data:");
var user_names = map(function(user) {
  return user.name;
}, filter(function(user) {
  return user.age > 25;
}, users));
console.log("Names of users over 25:", user_names);
//# sourceMappingURL=data:application/json;base64,
