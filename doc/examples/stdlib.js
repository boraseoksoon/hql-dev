// .hql-cache/1/core/lib/stdlib/js/stdlib.js
var LazySeq = class {
  constructor(producer) {
    this._producer = producer;
    this._realized = [];
    this._exhausted = false;
    this._iterating = false;
  }
  // Get a specific index, realizing values up to that point
  get(index) {
    this._realize(index + 1);
    return index < this._realized.length ? this._realized[index] : null;
  }
  // Convert to array up to a certain size (or all if realized)
  toArray(maxSize = Infinity) {
    if (maxSize === Infinity && this._exhausted) {
      return [...this._realized];
    }
    this._realize(maxSize);
    return this._realized.slice(0, maxSize);
  }
  // Internal method to realize values up to a certain count
  _realize(count) {
    if (this._exhausted || this._realized.length >= count || this._iterating) {
      return;
    }
    this._iterating = true;
    try {
      const iterator = this._producer();
      while (this._realized.length < count && !this._exhausted) {
        const { value, done } = iterator.next();
        if (done) {
          this._exhausted = true;
          break;
        }
        this._realized.push(value);
      }
    } finally {
      this._iterating = false;
    }
  }
  // Make the sequence iterable
  [Symbol.iterator]() {
    let index = 0;
    const seq = this;
    return {
      next() {
        const value = seq.get(index);
        if (index < seq._realized.length) {
          index++;
          return { value, done: false };
        }
        return { done: true };
      }
    };
  }
  // Add slice compatibility with normal arrays
  slice(start, end) {
    if (end !== void 0) {
      this._realize(end);
    } else {
      this._realize(start || 0);
    }
    return this._realized.slice(start, end);
  }
};
function lazySeq(generatorFn) {
  return new LazySeq(generatorFn);
}
function _take(n, coll) {
  if (!coll)
    return [];
  if (coll instanceof LazySeq) {
    return coll.toArray(n);
  }
  return coll.slice(0, n);
}
function _rangeGenerator(start, end, step = 1) {
  if (end === void 0) {
    end = start;
    start = 0;
  }
  return lazySeq(function* () {
    if (step > 0) {
      for (let i = start; i < end; i += step) {
        yield i;
      }
    } else {
      for (let i = start; i > end; i += step) {
        yield i;
      }
    }
  });
}

// .hql-cache/1/core/lib/stdlib/stdlib.ts
function take(n, coll) {
  return _take(n, coll);
}
function range(...args) {
  return (args === null ? 0 : args.length) === 0 ? _rangeGenerator(0, Infinity, 1) : (args === null ? 0 : args.length) === 1 ? _rangeGenerator(0, args[0], 1) : (args === null ? 0 : args.length) === 2 ? _rangeGenerator(args[0], ((args === null ? false : true) ? (args === null ? 0 : args.length) > 1 : args === null ? false : true) ? args[1] : null, 1) : true ? _rangeGenerator(args[0], ((args === null ? false : true) ? (args === null ? 0 : args.length) > 1 : args === null ? false : true) ? args[1] : null, args[2]) : null;
}

// .hql-cache/1/doc/examples/stdlib.ts
import * as chalkModule from "jsr:@nothing628/chalk@1.0.0";
take(3, range(10));
var chalk = function() {
  const wrapper = chalkModule.default !== void 0 ? chalkModule.default : {};
  for (const [key, value] of Object.entries(chalkModule)) {
    if (key !== "default")
      wrapper[key] = value;
  }
  return wrapper;
}();
console.log(chalk.green("JSR import working!"));
//# sourceMappingURL=data:application/json;base64,
