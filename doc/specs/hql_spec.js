// .hql-cache/1/doc/specs/hql_spec.ts
import * as pathModule from "https://deno.land/std@0.170.0/path/mod.ts";
import * as fileModule from "https://deno.land/std@0.170.0/fs/mod.ts";
var numbers = new Array();
numbers.push(1);
numbers.push(2);
numbers.push(3);
numbers.push(4);
numbers.push(5);
numbers.push(6);
numbers.push(7);
console.log(numbers);
var json = {
  items: [1, 2, 3, 4, 5]
};
console.log("json : ", json.items);
var data = {
  items: [5, 10, 15, 20, 25, 30, 35, 40],
  factor: 2,
  prefix: "Value: "
};
console.log("data.items : ", data.items);
var user = {
  name: "John",
  age: 30
};
var vec_item = numbers[2];
var map_value = user["name"];
var first_item = numbers[0];
var second_item = numbers[1];
var my_vector = [1, 2, 3, 4, 5];
var element2 = my_vector[2];
var element3 = my_vector[2];
var element4 = (() => {
  try {
    const result = my_vector[2];
    return result !== void 0 ? result : my_vector(2);
  } catch (_) {
    return my_vector(2);
  }
})();
var user2 = {
  name: "Alice",
  status: "active"
};
console.log(user2["name"]);
console.log(user2.name);
var my_list = ["a", "b", "c"];
my_list[1];
console.log((() => {
  try {
    const result = my_list[1];
    return result !== void 0 ? result : my_list(1);
  } catch (_) {
    return my_list(1);
  }
})());
var my_vector2 = [10, 20, 30];
my_vector2[2];
console.log((() => {
  try {
    const result = my_vector2[2];
    return result !== void 0 ? result : my_vector2(2);
  } catch (_) {
    return my_vector2(2);
  }
})());
var my_set = /* @__PURE__ */ new Set([1, 2, 3]);
console.log(Array.from(my_set)["2"]);
console.log(my_set.has(2));
console.log(my_set.has(2));
function square(x) {
  return x * x;
}
function factorial(n) {
  return n <= 1 ? 1 : n * factorial(n - 1);
}
console.log("square : ", square(10));
function classify_number(x) {
  return x < 0 ? "negative" : x === 0 ? "zero" : x < 10 ? "small positive" : x < 100 ? "medium positive" : true ? "large positive" : null;
}
console.log(classify_number(10));
console.log(classify_number(100));
function log_all(...items2) {
  return console.log(items2);
}
function with_prefix(prefix, ...rest) {
  return console.log(prefix, rest);
}
log_all(1, 2, 3, 4, 5);
with_prefix("Numbers:", 1, 2, 3);
function showcase(n) {
  return function() {
    const result = n < 0 ? "Cannot compute for negative numbers" : n === 0 ? "Identity element for factorial" : null;
    return result ? result : function() {
      const fact = factorial(n);
      const msg = "Factorial of " + (n + " is " + fact);
      console.log(msg);
      return [n, fact];
    }();
  }();
}
numbers.push(8);
console.log(numbers);
var max_int_value = Number.MAX_SAFE_INTEGER;
var current_timestamp = Date.now;
console.log("Hello from HQL!");
console.warn("This is a warning");
var date = /* @__PURE__ */ new Date();
var current_year = date.getFullYear;
var month = date.getMonth;
var formatted_date = date.toLocaleDateString;
var abs_value = Math.abs(-42);
var rounded = Math.round(3.7);
var max_value = Math.max(1, 2, 3, 4, 5);
var path = function() {
  const wrapper = pathModule.default !== void 0 ? pathModule.default : {};
  for (const [key, value] of Object.entries(pathModule)) {
    if (key !== "default")
      wrapper[key] = value;
  }
  return wrapper;
}();
var joined_path = path.join("folder", "file.txt");
var file = function() {
  const wrapper = fileModule.default !== void 0 ? fileModule.default : {};
  for (const [key, value] of Object.entries(fileModule)) {
    if (key !== "default")
      wrapper[key] = value;
  }
  return wrapper;
}();
var exists = file.existsSync("example-dir");
var message = "Hello, World!";
var upper_message = message.toUpperCase;
var message_parts = message.split(" ");
var array = [1, 2, 3];
array.push(4);
array.push(5);
console.log(array);
var year = date.getFullYear;
var date_string = date.toISOString;
var nums = [1, 2, 3, 4, 5];
var filtered = nums.filter(function(x) {
  return x > 2;
});
var doubled = filtered.map(function(x) {
  return x * 2;
});
var sum = nums.reduce(function(a, b) {
  return a + b;
}, 0);
var max_sum = Math.max(sum, 10);
var config = {
  db: {
    user: {
      name: "admin"
    }
  }
};
var db_part = config.db;
var user_part = db_part.user;
var admin_name = user_part.name;
function get_user() {
  return {
    id: 1,
    name: "John"
  };
}
var user_obj = get_user();
var user_name = user_obj.name;
var array_length = array.length;
var string_upper = message.toUpperCase;
var substring = message.substring(0, 5);
var replaced = message.replace("Hello", "Hi");
var even_numbers = numbers.filter(function(n) {
  return n % 2 === 0;
});
var doubled_evens = even_numbers.map(function(n) {
  return n * 2;
});
console.log("Doubled evens (step by step):", doubled_evens);
console.log((() => {
  const _obj = [1, 2, 3, 4, 5, 6, 7, 8].filter(function(n) {
    return n > 5;
  });
  const _prop = _obj.length;
  return typeof _prop === "function" ? _prop.call(_obj) : _prop;
})());
console.log([1, 2, 3, 4, 5, 6, 7, 8].filter(function(n) {
  return n % 2 === 0;
}).map(function(n) {
  return n * 2;
}));
(function() {
  const chained_result = function() {
    const filtered2 = numbers.filter(function(n) {
      return n > 5;
    });
    const mapped = filtered2.map(function(n) {
      return n * 2;
    });
    return mapped.reduce(function(acc, n) {
      return acc + n;
    }, 0);
  }();
  return console.log("Sum of doubled numbers > 5:", chained_result);
})();
var direct_chain = numbers.filter(function(n) {
  return n % 2 === 0;
}).map(function(n) {
  return n * 2;
});
console.log("Direct chain result:", direct_chain);
console.log("\\n----- Test 5: Complex Method Chaining -----");
var complex_chain = numbers.filter(function(n) {
  return n > 3;
}).map(function(n) {
  return n * 3;
}).slice(0, 3);
console.log("Complex chain result:", complex_chain);
var sum_chain = numbers.filter(function(n) {
  return n > 5;
}).map(function(n) {
  return n * 2;
}).filter(function(n) {
  return n % 4 === 0;
}).reduce(function(acc, n) {
  return acc + n;
}, 0);
console.log("Sum from complex chain:", sum_chain);
var macro_x = 10;
macro_x > 5 ? console.log("macro_x is greater than 5") : null;
macro_x < 5 ? null : console.log("macro_x is not less than 5");
function hql_unless(x) {
  return x ? null : x_param_735 ? false : true;
}
var x_plus_one = macro_x + 1;
var x_minus_one = macro_x - 1;
console.log(x_plus_one);
console.log(x_minus_one);
var first_name = "John";
var last_name = "Doe";
var full_name = first_name + " " + last_name;
console.log(full_name);
var age = 30;
var bio = full_name + " is " + age + " years old";
console.log(bio);
var score = 95;
var max_score = 100;
var percentage = score / max_score * 100;
var result_message = "Score: " + score + "/" + max_score + " (" + percentage + "%)";
console.log(result_message);
var items = ["apple", "banana", "orange"];
var item_count = items.length;
var summary = "Found " + item_count + " items: " + items[0] + ", " + items[1] + ", " + items[2];
console.log(summary);
(function() {
  const x = 10;
  const y = 20;
  const z = 30;
  x + y + z;
  return x + y + z;
})();
(function() {
  const x = 10;
  console.log(x + 5);
  return console.log(x + 5);
})();
(function() {
  const x = 10;
  const y = 20;
  x + y;
  return x + y;
})();
(function() {
  const outer = 5;
  (function() {
    const inner = outer + 2;
    outer * inner;
    return outer * inner;
  })();
  return function() {
    const inner = outer + 2;
    outer * inner;
    return outer * inner;
  }();
})();
(function() {
  const sum2 = 2 + 3;
  const product = 4 * 5;
  [sum2, product];
  return [sum2, product];
})();
function calculate(base) {
  return function() {
    const squared = base * base;
    const cubed = squared * base;
    squared + cubed;
    return squared + cubed;
  }();
}
calculate(3);
function get_number() {
  return 42;
}
function get_nothing() {
  return null;
}
function get_zero() {
  return 0;
}
function get_string() {
  return "Hello";
}
function test_if_let_truthy_number() {
  return function(x) {
    return x ? "Got number: " + x : "No number";
  }(get_number());
}
function test_if_let_nil() {
  return function(x) {
    return x ? "Got something: " + x : "Got nothing";
  }(get_nothing());
}
function test_if_let_zero() {
  return function(x) {
    return x ? "Got zero: " + x : "Zero is considered falsy";
  }(get_zero());
}
function test_if_let_string() {
  return function(x) {
    return x ? "Got string: " + x : "No string";
  }(get_string());
}
function test_if_let_nested() {
  return function(x) {
    return x ? function(y) {
      return y ? "Nested test: x = " + x + ", y = " + y : "Nested test: x = " + x + ", no y";
    }(x > 40 ? get_string() : null) : "No number";
  }(get_number());
}
console.log(test_if_let_truthy_number());
console.log(test_if_let_nil());
console.log(test_if_let_zero());
console.log(test_if_let_string());
console.log(test_if_let_nested());
export {
  showcase,
  square,
  hql_unless as unless
};
//# sourceMappingURL=data:application/json;base64,
